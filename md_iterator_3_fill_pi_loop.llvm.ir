; ModuleID = 'md_iterator_3.cpp'
source_filename = "md_iterator_3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
define void @_Z15fill_pi_loop_NNlPd(i64, double* noalias) local_unnamed_addr #0 !dbg !5 {
  %3 = and i64 %0, 31, !dbg !7
  %4 = icmp eq i64 %3, 0, !dbg !7
  tail call void @llvm.assume(i1 %4), !dbg !7
  %5 = ptrtoint double* %1 to i64, !dbg !8
  %6 = and i64 %5, 31, !dbg !8
  %7 = icmp eq i64 %6, 0, !dbg !8
  tail call void @llvm.assume(i1 %7), !dbg !8
  %8 = icmp eq i64 %0, 0, !dbg !9
  br i1 %8, label %45, label %9, !dbg !10

; <label>:9:                                      ; preds = %2
  br i1 false, label %33, label %10

; <label>:10:                                     ; preds = %9
  %11 = icmp ult i64 %0, 16
  %12 = icmp ult i64 %0, 16
  br label %13

; <label>:13:                                     ; preds = %80, %10
  %14 = phi i64 [ 0, %10 ], [ %81, %80 ]
  %15 = phi i64 [ %0, %10 ], [ %82, %80 ]
  %16 = mul nsw i64 %14, %0
  br i1 %11, label %18, label %17, !dbg !11

; <label>:17:                                     ; preds = %13
  br label %19, !dbg !12

; <label>:18:                                     ; preds = %13
  br label %51, !dbg !12

; <label>:19:                                     ; preds = %17, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %17 ], !dbg !13
  %21 = add nsw i64 %20, %16, !dbg !12
  %22 = getelementptr inbounds double, double* %1, i64 %21, !dbg !14
  %23 = bitcast double* %22 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %23, align 32, !dbg !15, !tbaa !16
  %24 = getelementptr double, double* %22, i64 4, !dbg !15
  %25 = bitcast double* %24 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %25, align 32, !dbg !15, !tbaa !16
  %26 = getelementptr double, double* %22, i64 8, !dbg !15
  %27 = bitcast double* %26 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %27, align 32, !dbg !15, !tbaa !16
  %28 = getelementptr double, double* %22, i64 12, !dbg !15
  %29 = bitcast double* %28 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %29, align 32, !dbg !15, !tbaa !16
  %30 = add i64 %20, 16, !dbg !13
  %31 = icmp eq i64 %30, %0, !dbg !13
  br i1 %31, label %47, label %19, !dbg !13, !llvm.loop !20

; <label>:32:                                     ; preds = %80
  br label %33, !dbg !24

; <label>:33:                                     ; preds = %32, %9
  br i1 false, label %34, label %44, !dbg !24

; <label>:34:                                     ; preds = %33
  br label %35, !dbg !24

; <label>:35:                                     ; preds = %34
  br i1 undef, label %39, label %36, !dbg !11

; <label>:36:                                     ; preds = %35
  br label %37, !dbg !12

; <label>:37:                                     ; preds = %37, %36
  br i1 true, label %38, label %37, !dbg !13, !llvm.loop !20

; <label>:38:                                     ; preds = %37
  br label %42, !dbg !25

; <label>:39:                                     ; preds = %35
  br label %40, !dbg !12

; <label>:40:                                     ; preds = %40, %39
  br i1 true, label %41, label %40, !dbg !11, !llvm.loop !26

; <label>:41:                                     ; preds = %40
  br label %42, !dbg !25

; <label>:42:                                     ; preds = %41, %38
  br label %43, !dbg !10

; <label>:43:                                     ; preds = %42
  br label %44, !dbg !24

; <label>:44:                                     ; preds = %33, %43
  br label %45, !dbg !24

; <label>:45:                                     ; preds = %44, %2
  ret void, !dbg !24

; <label>:46:                                     ; preds = %51
  br label %48, !dbg !25

; <label>:47:                                     ; preds = %19
  br label %48, !dbg !25

; <label>:48:                                     ; preds = %47, %46
  %49 = or i64 %14, 1, !dbg !25
  %50 = mul nsw i64 %49, %0
  br i1 %12, label %72, label %57, !dbg !11

; <label>:51:                                     ; preds = %18, %51
  %52 = phi i64 [ %55, %51 ], [ 0, %18 ]
  %53 = add nsw i64 %52, %16, !dbg !12
  %54 = getelementptr inbounds double, double* %1, i64 %53, !dbg !14
  store double 0x40091EB860000000, double* %54, align 8, !dbg !15, !tbaa !16
  %55 = add nuw nsw i64 %52, 1, !dbg !13
  %56 = icmp eq i64 %55, %0, !dbg !28
  br i1 %56, label %46, label %51, !dbg !11, !llvm.loop !26

; <label>:57:                                     ; preds = %48
  br label %58, !dbg !12

; <label>:58:                                     ; preds = %58, %57
  %59 = phi i64 [ %69, %58 ], [ 0, %57 ], !dbg !13
  %60 = add nsw i64 %59, %50, !dbg !12
  %61 = getelementptr inbounds double, double* %1, i64 %60, !dbg !14
  %62 = bitcast double* %61 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %62, align 32, !dbg !15, !tbaa !16
  %63 = getelementptr double, double* %61, i64 4, !dbg !15
  %64 = bitcast double* %63 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %64, align 32, !dbg !15, !tbaa !16
  %65 = getelementptr double, double* %61, i64 8, !dbg !15
  %66 = bitcast double* %65 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %66, align 32, !dbg !15, !tbaa !16
  %67 = getelementptr double, double* %61, i64 12, !dbg !15
  %68 = bitcast double* %67 to <4 x double>*, !dbg !15
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %68, align 32, !dbg !15, !tbaa !16
  %69 = add i64 %59, 16, !dbg !13
  %70 = icmp eq i64 %69, %0, !dbg !13
  br i1 %70, label %71, label %58, !dbg !13, !llvm.loop !20

; <label>:71:                                     ; preds = %58
  br label %80, !dbg !25

; <label>:72:                                     ; preds = %48
  br label %73, !dbg !12

; <label>:73:                                     ; preds = %73, %72
  %74 = phi i64 [ %77, %73 ], [ 0, %72 ]
  %75 = add nsw i64 %74, %50, !dbg !12
  %76 = getelementptr inbounds double, double* %1, i64 %75, !dbg !14
  store double 0x40091EB860000000, double* %76, align 8, !dbg !15, !tbaa !16
  %77 = add nuw nsw i64 %74, 1, !dbg !13
  %78 = icmp eq i64 %77, %0, !dbg !28
  br i1 %78, label %79, label %73, !dbg !11, !llvm.loop !26

; <label>:79:                                     ; preds = %73
  br label %80, !dbg !25

; <label>:80:                                     ; preds = %79, %71
  %81 = add nsw i64 %14, 2, !dbg !25
  %82 = add i64 %15, -2, !dbg !10
  %83 = icmp eq i64 %82, 0, !dbg !10
  br i1 %83, label %32, label %13, !dbg !10, !llvm.loop !29
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

; Function Attrs: nounwind
define void @_Z15fill_pi_loop_NMllPd(i64, i64, double* noalias) local_unnamed_addr #0 !dbg !31 {
  %4 = and i64 %0, 31, !dbg !32
  %5 = icmp eq i64 %4, 0, !dbg !32
  tail call void @llvm.assume(i1 %5), !dbg !32
  %6 = and i64 %1, 31, !dbg !33
  %7 = icmp eq i64 %6, 0, !dbg !33
  tail call void @llvm.assume(i1 %7), !dbg !33
  %8 = ptrtoint double* %2 to i64, !dbg !34
  %9 = and i64 %8, 31, !dbg !34
  %10 = icmp eq i64 %9, 0, !dbg !34
  tail call void @llvm.assume(i1 %10), !dbg !34
  %11 = icmp eq i64 %1, 0, !dbg !35
  %12 = icmp eq i64 %0, 0
  %13 = or i1 %11, %12, !dbg !36
  br i1 %13, label %50, label %14, !dbg !36

; <label>:14:                                     ; preds = %3
  br i1 false, label %38, label %15

; <label>:15:                                     ; preds = %14
  %16 = icmp ult i64 %0, 16
  %17 = icmp ult i64 %0, 16
  br label %18

; <label>:18:                                     ; preds = %85, %15
  %19 = phi i64 [ 0, %15 ], [ %86, %85 ]
  %20 = phi i64 [ %1, %15 ], [ %87, %85 ]
  %21 = mul nsw i64 %19, %0
  br i1 %16, label %23, label %22, !dbg !37

; <label>:22:                                     ; preds = %18
  br label %24, !dbg !38

; <label>:23:                                     ; preds = %18
  br label %56, !dbg !38

; <label>:24:                                     ; preds = %22, %24
  %25 = phi i64 [ %35, %24 ], [ 0, %22 ], !dbg !39
  %26 = add nsw i64 %25, %21, !dbg !38
  %27 = getelementptr inbounds double, double* %2, i64 %26, !dbg !40
  %28 = bitcast double* %27 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %28, align 32, !dbg !41, !tbaa !16
  %29 = getelementptr double, double* %27, i64 4, !dbg !41
  %30 = bitcast double* %29 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %30, align 32, !dbg !41, !tbaa !16
  %31 = getelementptr double, double* %27, i64 8, !dbg !41
  %32 = bitcast double* %31 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %32, align 32, !dbg !41, !tbaa !16
  %33 = getelementptr double, double* %27, i64 12, !dbg !41
  %34 = bitcast double* %33 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %34, align 32, !dbg !41, !tbaa !16
  %35 = add i64 %25, 16, !dbg !39
  %36 = icmp eq i64 %35, %0, !dbg !39
  br i1 %36, label %52, label %24, !dbg !39, !llvm.loop !42

; <label>:37:                                     ; preds = %85
  br label %38, !dbg !44

; <label>:38:                                     ; preds = %37, %14
  br i1 false, label %39, label %49, !dbg !44

; <label>:39:                                     ; preds = %38
  br label %40, !dbg !44

; <label>:40:                                     ; preds = %39
  br i1 undef, label %44, label %41, !dbg !37

; <label>:41:                                     ; preds = %40
  br label %42, !dbg !38

; <label>:42:                                     ; preds = %42, %41
  br i1 true, label %43, label %42, !dbg !39, !llvm.loop !42

; <label>:43:                                     ; preds = %42
  br label %47, !dbg !45

; <label>:44:                                     ; preds = %40
  br label %45, !dbg !38

; <label>:45:                                     ; preds = %45, %44
  br i1 true, label %46, label %45, !dbg !37, !llvm.loop !46

; <label>:46:                                     ; preds = %45
  br label %47, !dbg !45

; <label>:47:                                     ; preds = %46, %43
  br label %48, !dbg !36

; <label>:48:                                     ; preds = %47
  br label %49, !dbg !44

; <label>:49:                                     ; preds = %38, %48
  br label %50, !dbg !44

; <label>:50:                                     ; preds = %49, %3
  ret void, !dbg !44

; <label>:51:                                     ; preds = %56
  br label %53, !dbg !45

; <label>:52:                                     ; preds = %24
  br label %53, !dbg !45

; <label>:53:                                     ; preds = %52, %51
  %54 = or i64 %19, 1, !dbg !45
  %55 = mul nsw i64 %54, %0
  br i1 %17, label %77, label %62, !dbg !37

; <label>:56:                                     ; preds = %23, %56
  %57 = phi i64 [ %60, %56 ], [ 0, %23 ]
  %58 = add nsw i64 %57, %21, !dbg !38
  %59 = getelementptr inbounds double, double* %2, i64 %58, !dbg !40
  store double 0x40091EB860000000, double* %59, align 8, !dbg !41, !tbaa !16
  %60 = add nuw nsw i64 %57, 1, !dbg !39
  %61 = icmp eq i64 %60, %0, !dbg !47
  br i1 %61, label %51, label %56, !dbg !37, !llvm.loop !46

; <label>:62:                                     ; preds = %53
  br label %63, !dbg !38

; <label>:63:                                     ; preds = %63, %62
  %64 = phi i64 [ %74, %63 ], [ 0, %62 ], !dbg !39
  %65 = add nsw i64 %64, %55, !dbg !38
  %66 = getelementptr inbounds double, double* %2, i64 %65, !dbg !40
  %67 = bitcast double* %66 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %67, align 32, !dbg !41, !tbaa !16
  %68 = getelementptr double, double* %66, i64 4, !dbg !41
  %69 = bitcast double* %68 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %69, align 32, !dbg !41, !tbaa !16
  %70 = getelementptr double, double* %66, i64 8, !dbg !41
  %71 = bitcast double* %70 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %71, align 32, !dbg !41, !tbaa !16
  %72 = getelementptr double, double* %66, i64 12, !dbg !41
  %73 = bitcast double* %72 to <4 x double>*, !dbg !41
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %73, align 32, !dbg !41, !tbaa !16
  %74 = add i64 %64, 16, !dbg !39
  %75 = icmp eq i64 %74, %0, !dbg !39
  br i1 %75, label %76, label %63, !dbg !39, !llvm.loop !42

; <label>:76:                                     ; preds = %63
  br label %85, !dbg !45

; <label>:77:                                     ; preds = %53
  br label %78, !dbg !38

; <label>:78:                                     ; preds = %78, %77
  %79 = phi i64 [ %82, %78 ], [ 0, %77 ]
  %80 = add nsw i64 %79, %55, !dbg !38
  %81 = getelementptr inbounds double, double* %2, i64 %80, !dbg !40
  store double 0x40091EB860000000, double* %81, align 8, !dbg !41, !tbaa !16
  %82 = add nuw nsw i64 %79, 1, !dbg !39
  %83 = icmp eq i64 %82, %0, !dbg !47
  br i1 %83, label %84, label %78, !dbg !37, !llvm.loop !46

; <label>:84:                                     ; preds = %78
  br label %85, !dbg !45

; <label>:85:                                     ; preds = %84, %76
  %86 = add nsw i64 %19, 2, !dbg !45
  %87 = add i64 %20, -2, !dbg !36
  %88 = icmp eq i64 %87, 0, !dbg !36
  br i1 %88, label %37, label %18, !dbg !36, !llvm.loop !48
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_3.cpp", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "fill_pi_loop_NN", scope: !1, file: !1, line: 732, type: !6, isLocal: false, isDefinition: true, scopeLine: 736, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !DILocation(line: 737, column: 5, scope: !5)
!8 = !DILocation(line: 738, column: 5, scope: !5)
!9 = !DILocation(line: 741, column: 34, scope: !5)
!10 = !DILocation(line: 741, column: 5, scope: !5)
!11 = !DILocation(line: 742, column: 9, scope: !5)
!12 = !DILocation(line: 743, column: 17, scope: !5)
!13 = !DILocation(line: 742, column: 44, scope: !5)
!14 = !DILocation(line: 743, column: 13, scope: !5)
!15 = !DILocation(line: 743, column: 26, scope: !5)
!16 = !{!17, !17, i64 0}
!17 = !{!"double", !18, i64 0}
!18 = !{!"omnipotent char", !19, i64 0}
!19 = !{!"Simple C++ TBAA"}
!20 = distinct !{!20, !11, !21, !22, !23}
!21 = !DILocation(line: 743, column: 28, scope: !5)
!22 = !{!"llvm.loop.vectorize.width", i32 1}
!23 = !{!"llvm.loop.interleave.count", i32 1}
!24 = !DILocation(line: 744, column: 1, scope: !5)
!25 = !DILocation(line: 741, column: 40, scope: !5)
!26 = distinct !{!26, !11, !21, !27, !22, !23}
!27 = !{!"llvm.loop.unroll.runtime.disable"}
!28 = !DILocation(line: 742, column: 38, scope: !5)
!29 = distinct !{!29, !10, !21, !30}
!30 = !{!"llvm.loop.vectorize.enable", i1 true}
!31 = distinct !DISubprogram(name: "fill_pi_loop_NM", scope: !1, file: !1, line: 746, type: !6, isLocal: false, isDefinition: true, scopeLine: 751, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!32 = !DILocation(line: 752, column: 5, scope: !31)
!33 = !DILocation(line: 753, column: 5, scope: !31)
!34 = !DILocation(line: 754, column: 5, scope: !31)
!35 = !DILocation(line: 757, column: 34, scope: !31)
!36 = !DILocation(line: 757, column: 5, scope: !31)
!37 = !DILocation(line: 758, column: 9, scope: !31)
!38 = !DILocation(line: 759, column: 17, scope: !31)
!39 = !DILocation(line: 758, column: 44, scope: !31)
!40 = !DILocation(line: 759, column: 13, scope: !31)
!41 = !DILocation(line: 759, column: 26, scope: !31)
!42 = distinct !{!42, !37, !43, !22, !23}
!43 = !DILocation(line: 759, column: 28, scope: !31)
!44 = !DILocation(line: 760, column: 1, scope: !31)
!45 = !DILocation(line: 757, column: 40, scope: !31)
!46 = distinct !{!46, !37, !43, !27, !22, !23}
!47 = !DILocation(line: 758, column: 38, scope: !31)
!48 = distinct !{!48, !36, !43, !30}
