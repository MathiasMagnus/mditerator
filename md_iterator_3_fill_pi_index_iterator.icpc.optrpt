Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -std=c++14 -fno-exceptions -fno-rtti -g0 -O3 -xAVX2 -fast -fstrict-aliasing -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-dwarf2-cfi-asm -Wall -DFILL_PI_INDEX_ITERATOR -qopt-report=5 -S -o md_iterator_3_fill_pi_index_iterator.icpc.rpt

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [1/17=5.9%] <compiler generated>
  -> EXTERN: /opt/gcc/6.3.0/snos/include/g++/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /opt/gcc/6.3.0/snos/include/g++/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_data_ptr<double>(const std::vector<double, std::allocator<double>> *, double *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::vector<double, std::allocator<double>>::_M_data_ptr<double>(const std::vector<double, std::allocator<double>> *, double *) const) /opt/gcc/6.3.0/snos/include/g++/bits/stl_vector.h(1482,2)

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)) /opt/gcc/6.3.0/snos/include/g++/bits/stl_vector.h(892,7)

===========================================================================

Begin optimization report for: index_2d_iterator::index_2d_iterator(index_2d_iterator *, dimension, dimension)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator::index_2d_iterator(index_2d_iterator *, dimension, dimension)) md_iterator_3.cpp(505,5)

===========================================================================

Begin optimization report for: index_2d_iterator::operator++(index_2d_iterator *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator::operator++(index_2d_iterator *)) md_iterator_3.cpp(508,5)

===========================================================================

Begin optimization report for: index_2d_iterator::operator*(const index_2d_iterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator::operator*(const index_2d_iterator *) const) md_iterator_3.cpp(556,51)

===========================================================================

Begin optimization report for: index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type)) md_iterator_3.cpp(548,5)

===========================================================================

Begin optimization report for: index_2d_iterator::sentinel::sentinel(index_2d_iterator::sentinel *, index_2d_iterator::sentinel::index_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator::sentinel::sentinel(index_2d_iterator::sentinel *, index_2d_iterator::sentinel::index_type)) md_iterator_3.cpp(498,63)

===========================================================================

Begin optimization report for: index_2d_iterator_sentinel_range::index_2d_iterator_sentinel_range(index_2d_iterator_sentinel_range *, index_2d_iterator_sentinel_range::index_type, index_2d_iterator_sentinel_range::index_type)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator_sentinel_range::index_2d_iterator_sentinel_range(index_2d_iterator_sentinel_range *, index_2d_iterator_sentinel_range::index_type, index_2d_iterator_sentinel_range::index_type)) md_iterator_3.cpp(613,5)

===========================================================================

Begin optimization report for: index_2d_iterator_sentinel_range::begin(const index_2d_iterator_sentinel_range *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator_sentinel_range::begin(const index_2d_iterator_sentinel_range *) const) md_iterator_3.cpp(615,56)

===========================================================================

Begin optimization report for: index_2d_iterator_sentinel_range::end(const index_2d_iterator_sentinel_range *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (index_2d_iterator_sentinel_range::end(const index_2d_iterator_sentinel_range *) const) md_iterator_3.cpp(617,64)

===========================================================================

Begin optimization report for: operator-(const index_2d_iterator &, index_2d_iterator::sentinel)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (operator-(const index_2d_iterator &, index_2d_iterator::sentinel)) md_iterator_3.cpp(528,5)

===========================================================================

Begin optimization report for: operator-(index_2d_iterator::sentinel, const index_2d_iterator &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (operator-(index_2d_iterator::sentinel, const index_2d_iterator &)) md_iterator_3.cpp(540,5)

===========================================================================

Begin optimization report for: operator==(const index_2d_iterator &, index_2d_iterator::sentinel)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (operator==(const index_2d_iterator &, index_2d_iterator::sentinel)) md_iterator_3.cpp(585,5)

===========================================================================

Begin optimization report for: operator!=(const index_2d_iterator &, index_2d_iterator::sentinel)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (operator!=(const index_2d_iterator &, index_2d_iterator::sentinel)) md_iterator_3.cpp(595,5)

===========================================================================

Begin optimization report for: fill_pi_index_iterator_sentinel_range_NN(std::ptrdiff_t, std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fill_pi_index_iterator_sentinel_range_NN(std::ptrdiff_t, std::vector<double, std::allocator<double>> &)) [16/17=94.1%] md_iterator_3.cpp(688,1)
  -> INLINE (MANUAL): (689,33) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *) (isz = 3) (sz = 10)
    -> INLINE (MANUAL): /opt/gcc/6.3.0/snos/include/g++/bits/stl_vector.h:(892,16) std::vector<double, std::allocator<double>>::_M_data_ptr<double>(const std::vector<double, std::allocator<double>> *, double *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (694,54) index_2d_iterator_sentinel_range::index_2d_iterator_sentinel_range(index_2d_iterator_sentinel_range *, index_2d_iterator_sentinel_range::index_type, index_2d_iterator_sentinel_range::index_type) (isz = 24) (sz = 33)
    -> INLINE (MANUAL): (612,33) index_2d_iterator::index_2d_iterator(index_2d_iterator *, dimension, dimension) (isz = 7) (sz = 15)
    -> INLINE (MANUAL): (612,57) index_2d_iterator::sentinel::sentinel(index_2d_iterator::sentinel *, index_2d_iterator::sentinel::index_type) (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (695,18) index_2d_iterator_sentinel_range::begin(const index_2d_iterator_sentinel_range *) const (isz = 2) (sz = 8)
  -> INLINE (MANUAL): (696,18) index_2d_iterator_sentinel_range::end(const index_2d_iterator_sentinel_range *) const (isz = 2) (sz = 8)
  -> INLINE (MANUAL): (699,5) index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type) (isz = 30) (sz = 39)
    -> INLINE (MANUAL): (551,13) index_2d_iterator::operator++(index_2d_iterator *) (isz = 20) (sz = 27)
  -> INLINE (MANUAL): (699,5) operator-(index_2d_iterator::sentinel, const index_2d_iterator &) (isz = 24) (sz = 33)
    -> INLINE (MANUAL): (541,19) operator-(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 23) (sz = 32)
  -> INLINE (MANUAL): (699,12) operator!=(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 11) (sz = 20)
    -> INLINE (MANUAL): (596,20) operator==(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 7) (sz = 16)
  -> INLINE (MANUAL): (701,21) index_2d_iterator::operator*(const index_2d_iterator *) const (isz = 2) (sz = 9)
  -> INLINE (MANUAL): (703,1) index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type) (isz = 30) (sz = 39)
    -> INLINE (MANUAL): (551,13) index_2d_iterator::operator++(index_2d_iterator *) (isz = 20) (sz = 27)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at md_iterator_3.cpp(700,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <A>, 64-bit indexed, part of index is conditional   [ md_iterator_3.cpp(702,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 46.500 
   remark #15478: estimated potential speedup: 0.360 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(699,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at md_iterator_3.cpp(700,5)
<Remainder loop for vectorization>

   LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(699,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(703,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between first.i.idx (517:13) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (517:13)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed FLOW dependence between first.i.idx (512:11) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (517:13)
LOOP END

    Report from: Code generation optimizations [cg]

md_iterator_3.cpp(608,15):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
md_iterator_3.cpp(608,15):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
md_iterator_3.cpp(612,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
md_iterator_3.cpp(612,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
md_iterator_3.cpp(688,1):remark #34051: REGISTER ALLOCATION : [_Z40fill_pi_index_iterator_sentinel_range_NNlRSt6vectorIdSaIdEE] md_iterator_3.cpp:688

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      90
            Global    :      47
            Local     :      43
        Regenerable   :       8
        Spilled       :       8
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       5 [5.00e+00 ~ 2.4%]
            Writes    :       6 [6.00e+00 ~ 2.9%]
        Spills        :      72 bytes*
            Reads     :      10 [3.56e+00 ~ 1.7%]
            Writes    :      10 [1.98e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fill_pi_index_iterator_sentinel_range_NM(std::ptrdiff_t, std::ptrdiff_t, std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fill_pi_index_iterator_sentinel_range_NM(std::ptrdiff_t, std::ptrdiff_t, std::vector<double, std::allocator<double>> &)) [17/17=100.0%] md_iterator_3.cpp(711,1)
  -> INLINE (MANUAL): (712,33) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *) (isz = 3) (sz = 10)
    -> INLINE (MANUAL): /opt/gcc/6.3.0/snos/include/g++/bits/stl_vector.h:(892,16) std::vector<double, std::allocator<double>>::_M_data_ptr<double>(const std::vector<double, std::allocator<double>> *, double *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (718,54) index_2d_iterator_sentinel_range::index_2d_iterator_sentinel_range(index_2d_iterator_sentinel_range *, index_2d_iterator_sentinel_range::index_type, index_2d_iterator_sentinel_range::index_type) (isz = 24) (sz = 33)
    -> INLINE (MANUAL): (612,33) index_2d_iterator::index_2d_iterator(index_2d_iterator *, dimension, dimension) (isz = 7) (sz = 15)
    -> INLINE (MANUAL): (612,57) index_2d_iterator::sentinel::sentinel(index_2d_iterator::sentinel *, index_2d_iterator::sentinel::index_type) (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (719,18) index_2d_iterator_sentinel_range::begin(const index_2d_iterator_sentinel_range *) const (isz = 2) (sz = 8)
  -> INLINE (MANUAL): (720,18) index_2d_iterator_sentinel_range::end(const index_2d_iterator_sentinel_range *) const (isz = 2) (sz = 8)
  -> INLINE (MANUAL): (723,5) index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type) (isz = 30) (sz = 39)
    -> INLINE (MANUAL): (551,13) index_2d_iterator::operator++(index_2d_iterator *) (isz = 20) (sz = 27)
  -> INLINE (MANUAL): (723,5) operator-(index_2d_iterator::sentinel, const index_2d_iterator &) (isz = 24) (sz = 33)
    -> INLINE (MANUAL): (541,19) operator-(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 23) (sz = 32)
  -> INLINE (MANUAL): (723,12) operator!=(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 11) (sz = 20)
    -> INLINE (MANUAL): (596,20) operator==(const index_2d_iterator &, index_2d_iterator::sentinel) (isz = 7) (sz = 16)
  -> INLINE (MANUAL): (725,21) index_2d_iterator::operator*(const index_2d_iterator *) const (isz = 2) (sz = 9)
  -> INLINE (MANUAL): (727,1) index_2d_iterator::operator+=(index_2d_iterator *, index_2d_iterator::index_type) (isz = 30) (sz = 39)
    -> INLINE (MANUAL): (551,13) index_2d_iterator::operator++(index_2d_iterator *) (isz = 20) (sz = 27)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at md_iterator_3.cpp(724,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <A>, 64-bit indexed, part of index is conditional   [ md_iterator_3.cpp(726,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 46.500 
   remark #15478: estimated potential speedup: 0.360 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(723,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at md_iterator_3.cpp(724,5)
<Remainder loop for vectorization>

   LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(723,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at md_iterator_3.cpp(550,9) inlined into md_iterator_3.cpp(727,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between first.i.idx (517:13) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (517:13)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed FLOW dependence between first.i.idx (512:11) and first.i.idx (512:11)
   remark #15346: vector dependence: assumed ANTI dependence between first.i.idx (512:11) and first.i.idx (517:13)
LOOP END

    Report from: Code generation optimizations [cg]

md_iterator_3.cpp(608,15):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
md_iterator_3.cpp(608,15):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
md_iterator_3.cpp(612,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
md_iterator_3.cpp(612,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
md_iterator_3.cpp(711,1):remark #34051: REGISTER ALLOCATION : [_Z40fill_pi_index_iterator_sentinel_range_NMllRSt6vectorIdSaIdEE] md_iterator_3.cpp:711

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      93
            Global    :      48
            Local     :      45
        Regenerable   :       8
        Spilled       :       8
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :       5 [5.00e+00 ~ 2.3%]
            Writes    :       6 [6.00e+00 ~ 2.8%]
        Spills        :      72 bytes*
            Reads     :      10 [3.56e+00 ~ 1.7%]
            Writes    :      10 [1.98e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
