; ModuleID = 'md_iterator_2.cpp'
source_filename = "md_iterator_2.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"class.std::__1::__libcpp_compressed_pair_imp" }
%"class.std::__1::__libcpp_compressed_pair_imp" = type { double* }

; Function Attrs: nounwind
define void @_Z18transform_iteratorlRNSt3__16vectorIdNS_9allocatorIdEEEE(i64, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 !dbg !5 {
  %3 = and i64 %0, 31, !dbg !7
  %4 = icmp eq i64 %3, 0, !dbg !7
  tail call void @llvm.assume(i1 %4), !dbg !8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0, !dbg !9
  %6 = load double*, double** %5, align 8, !dbg !9, !tbaa !13
  %7 = icmp sgt i64 %0, 0, !dbg !19
  tail call void @llvm.assume(i1 %7) #1, !dbg !26, !noalias !27
  br i1 false, label %32, label %8, !dbg !30

; <label>:8:                                      ; preds = %2
  %9 = icmp ult i64 %0, 16
  %10 = icmp ult i64 %0, 16
  br label %11, !dbg !30

; <label>:11:                                     ; preds = %79, %8
  %12 = phi i64 [ 0, %8 ], [ %80, %79 ]
  %13 = phi i64 [ %0, %8 ], [ %81, %79 ]
  br i1 %9, label %16, label %14, !dbg !31

; <label>:14:                                     ; preds = %11
  %15 = mul nsw i64 %12, %0
  br label %18, !dbg !31

; <label>:16:                                     ; preds = %11
  %17 = mul nsw i64 %12, %0
  br label %44, !dbg !31

; <label>:18:                                     ; preds = %14, %18
  %19 = phi i64 [ %29, %18 ], [ 0, %14 ], !dbg !32
  %20 = add nsw i64 %15, %19, !dbg !37
  %21 = getelementptr inbounds double, double* %6, i64 %20, !dbg !38
  %22 = bitcast double* %21 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %22, align 8, !dbg !39, !tbaa !40
  %23 = getelementptr double, double* %21, i64 4, !dbg !39
  %24 = bitcast double* %23 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %24, align 8, !dbg !39, !tbaa !40
  %25 = getelementptr double, double* %21, i64 8, !dbg !39
  %26 = bitcast double* %25 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %26, align 8, !dbg !39, !tbaa !40
  %27 = getelementptr double, double* %21, i64 12, !dbg !39
  %28 = bitcast double* %27 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %28, align 8, !dbg !39, !tbaa !40
  %29 = add i64 %19, 16, !dbg !32
  %30 = icmp eq i64 %29, %0, !dbg !32
  br i1 %30, label %51, label %18, !dbg !32, !llvm.loop !42

; <label>:31:                                     ; preds = %79
  br label %32, !dbg !47

; <label>:32:                                     ; preds = %31, %2
  br i1 false, label %33, label %43, !dbg !47

; <label>:33:                                     ; preds = %32
  br label %34, !dbg !47

; <label>:34:                                     ; preds = %33
  br i1 undef, label %38, label %35, !dbg !31

; <label>:35:                                     ; preds = %34
  br label %36, !dbg !31

; <label>:36:                                     ; preds = %36, %35
  br i1 true, label %37, label %36, !dbg !32, !llvm.loop !42

; <label>:37:                                     ; preds = %36
  br label %41, !dbg !48

; <label>:38:                                     ; preds = %34
  br label %39, !dbg !31

; <label>:39:                                     ; preds = %39, %38
  br i1 true, label %40, label %39, !dbg !49, !llvm.loop !50

; <label>:40:                                     ; preds = %39
  br label %41, !dbg !48

; <label>:41:                                     ; preds = %40, %37
  br label %42, !dbg !52

; <label>:42:                                     ; preds = %41
  br label %43, !dbg !47

; <label>:43:                                     ; preds = %32, %42
  ret void, !dbg !47

; <label>:44:                                     ; preds = %16, %44
  %45 = phi i64 [ %48, %44 ], [ 0, %16 ]
  %46 = add nsw i64 %17, %45, !dbg !37
  %47 = getelementptr inbounds double, double* %6, i64 %46, !dbg !38
  store double 0x40091EB860000000, double* %47, align 8, !dbg !39, !tbaa !40
  %48 = add nuw nsw i64 %45, 1, !dbg !32
  %49 = icmp eq i64 %48, %0, !dbg !53
  br i1 %49, label %50, label %44, !dbg !49, !llvm.loop !50

; <label>:50:                                     ; preds = %44
  br label %52, !dbg !48

; <label>:51:                                     ; preds = %18
  br label %52, !dbg !48

; <label>:52:                                     ; preds = %51, %50
  %53 = or i64 %12, 1, !dbg !48
  br i1 %10, label %70, label %54, !dbg !31

; <label>:54:                                     ; preds = %52
  %55 = mul nsw i64 %53, %0
  br label %56, !dbg !31

; <label>:56:                                     ; preds = %56, %54
  %57 = phi i64 [ %67, %56 ], [ 0, %54 ], !dbg !32
  %58 = add nsw i64 %55, %57, !dbg !37
  %59 = getelementptr inbounds double, double* %6, i64 %58, !dbg !38
  %60 = bitcast double* %59 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %60, align 8, !dbg !39, !tbaa !40
  %61 = getelementptr double, double* %59, i64 4, !dbg !39
  %62 = bitcast double* %61 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %62, align 8, !dbg !39, !tbaa !40
  %63 = getelementptr double, double* %59, i64 8, !dbg !39
  %64 = bitcast double* %63 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %64, align 8, !dbg !39, !tbaa !40
  %65 = getelementptr double, double* %59, i64 12, !dbg !39
  %66 = bitcast double* %65 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %66, align 8, !dbg !39, !tbaa !40
  %67 = add i64 %57, 16, !dbg !32
  %68 = icmp eq i64 %67, %0, !dbg !32
  br i1 %68, label %69, label %56, !dbg !32, !llvm.loop !42

; <label>:69:                                     ; preds = %56
  br label %79, !dbg !48

; <label>:70:                                     ; preds = %52
  %71 = mul nsw i64 %53, %0
  br label %72, !dbg !31

; <label>:72:                                     ; preds = %72, %70
  %73 = phi i64 [ %76, %72 ], [ 0, %70 ]
  %74 = add nsw i64 %71, %73, !dbg !37
  %75 = getelementptr inbounds double, double* %6, i64 %74, !dbg !38
  store double 0x40091EB860000000, double* %75, align 8, !dbg !39, !tbaa !40
  %76 = add nuw nsw i64 %73, 1, !dbg !32
  %77 = icmp eq i64 %76, %0, !dbg !53
  br i1 %77, label %78, label %72, !dbg !49, !llvm.loop !50

; <label>:78:                                     ; preds = %72
  br label %79, !dbg !48

; <label>:79:                                     ; preds = %78, %69
  %80 = add nsw i64 %12, 2, !dbg !48
  %81 = add i64 %13, -2, !dbg !52
  %82 = icmp eq i64 %81, 0, !dbg !52
  br i1 %82, label %31, label %11, !dbg !52, !llvm.loop !54
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_2.cpp", directory: "/global/homes/w/wash/sandbox/cxx/coroutines")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "transform_iterator", scope: !1, file: !1, line: 262, type: !6, isLocal: false, isDefinition: true, scopeLine: 263, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !DILocation(line: 264, column: 31, scope: !5)
!8 = !DILocation(line: 264, column: 5, scope: !5)
!9 = !DILocation(line: 671, column: 47, scope: !10, inlinedAt: !12)
!10 = distinct !DISubprogram(name: "data", scope: !11, file: !11, line: 670, type: !6, isLocal: false, isDefinition: true, scopeLine: 671, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!11 = !DIFile(filename: "/global/u1/w/wash/development/gor-llvm/INSTALL_RELEASE/bin/../include/c++/v1/vector", directory: "/global/homes/w/wash/sandbox/cxx/coroutines")
!12 = distinct !DILocation(line: 269, column: 40, scope: !5)
!13 = !{!14, !15, i64 0}
!14 = !{!"_ZTSNSt3__113__vector_baseIdNS_9allocatorIdEEEE", !15, i64 0, !15, i64 8, !18, i64 16}
!15 = !{!"any pointer", !16, i64 0}
!16 = !{!"omnipotent char", !17, i64 0}
!17 = !{!"Simple C++ TBAA"}
!18 = !{!"_ZTSNSt3__117__compressed_pairIPdNS_9allocatorIdEEEE"}
!19 = !DILocation(line: 255, column: 25, scope: !20, inlinedAt: !21)
!20 = distinct !DISubprogram(name: "generate_left_loop<double *, long>", scope: !1, file: !1, line: 227, type: !6, isLocal: false, isDefinition: true, scopeLine: 228, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!21 = distinct !DILocation(line: 36, column: 25, scope: !22, inlinedAt: !23)
!22 = distinct !DISubprogram(name: "resume", scope: !1, file: !1, line: 36, type: !6, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!23 = distinct !DILocation(line: 196, column: 11, scope: !24, inlinedAt: !25)
!24 = distinct !DISubprogram(name: "begin", scope: !1, file: !1, line: 194, type: !6, isLocal: false, isDefinition: true, scopeLine: 195, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!25 = distinct !DILocation(line: 269, column: 17, scope: !5)
!26 = !DILocation(line: 256, column: 5, scope: !20, inlinedAt: !21)
!27 = !{!28}
!28 = distinct !{!28, !29, !"_Z18generate_left_loopIPdlE19left_loop_generatorIT_ES2_T0_S4_.resume: argument 0"}
!29 = distinct !{!29, !"_Z18generate_left_loopIPdlE19left_loop_generatorIT_ES2_T0_S4_.resume"}
!30 = !DILocation(line: 269, column: 17, scope: !5)
!31 = !DILocation(line: 270, column: 25, scope: !5)
!32 = !DILocation(line: 258, column: 25, scope: !20, inlinedAt: !33)
!33 = distinct !DILocation(line: 36, column: 25, scope: !22, inlinedAt: !34)
!34 = distinct !DILocation(line: 155, column: 18, scope: !35, inlinedAt: !36)
!35 = distinct !DISubprogram(name: "operator++", scope: !1, file: !1, line: 153, type: !6, isLocal: false, isDefinition: true, scopeLine: 154, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!36 = distinct !DILocation(line: 269, column: 17, scope: !5)
!37 = !DILocation(line: 270, column: 19, scope: !5)
!38 = !DILocation(line: 270, column: 9, scope: !5)
!39 = !DILocation(line: 270, column: 30, scope: !5)
!40 = !{!41, !41, i64 0}
!41 = !{!"double", !16, i64 0}
!42 = distinct !{!42, !43, !44, !45, !46}
!43 = !DILocation(line: 258, column: 9, scope: !20)
!44 = !DILocation(line: 259, column: 13, scope: !20)
!45 = !{!"llvm.loop.vectorize.width", i32 1}
!46 = !{!"llvm.loop.interleave.count", i32 1}
!47 = !DILocation(line: 271, column: 1, scope: !5)
!48 = !DILocation(line: 257, column: 48, scope: !20, inlinedAt: !33)
!49 = !DILocation(line: 258, column: 9, scope: !20, inlinedAt: !33)
!50 = distinct !{!50, !43, !44, !51, !45, !46}
!51 = !{!"llvm.loop.unroll.runtime.disable"}
!52 = !DILocation(line: 257, column: 5, scope: !20, inlinedAt: !33)
!53 = !DILocation(line: 258, column: 18, scope: !20, inlinedAt: !33)
!54 = distinct !{!54, !55, !44}
!55 = !DILocation(line: 257, column: 5, scope: !20)
