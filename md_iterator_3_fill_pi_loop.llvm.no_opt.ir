; ModuleID = 'md_iterator_3.cpp'
source_filename = "md_iterator_3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
define void @_Z15fill_pi_loop_NNlPd(i64, double* noalias) #0 !dbg !5 {
  %3 = alloca i64, align 8
  %4 = alloca double*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32
  %7 = alloca i64, align 8
  store i64 %0, i64* %3, align 8, !tbaa !7
  store double* %1, double** %4, align 8, !tbaa !11
  %8 = load i64, i64* %3, align 8, !dbg !13, !tbaa !7
  %9 = srem i64 %8, 32, !dbg !13
  %10 = icmp eq i64 %9, 0, !dbg !13
  call void @llvm.assume(i1 %10), !dbg !13
  %11 = load double*, double** %4, align 8, !dbg !14, !tbaa !11
  %12 = bitcast double* %11 to i8*, !dbg !14
  %13 = ptrtoint i8* %12 to i64, !dbg !14
  %14 = and i64 %13, 31, !dbg !14
  %15 = icmp eq i64 %14, 0, !dbg !14
  call void @llvm.assume(i1 %15), !dbg !14
  %16 = bitcast i8* %12 to double*, !dbg !14
  store double* %16, double** %4, align 8, !dbg !14, !tbaa !11
  %17 = bitcast i64* %5 to i8*, !dbg !15
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !15
  store i64 0, i64* %5, align 8, !dbg !16, !tbaa !7
  br label %18, !dbg !15

; <label>:18:                                     ; preds = %44, %2
  %19 = load i64, i64* %5, align 8, !dbg !17, !tbaa !7
  %20 = load i64, i64* %3, align 8, !dbg !18, !tbaa !7
  %21 = icmp ne i64 %19, %20, !dbg !19
  br i1 %21, label %24, label %22, !dbg !20

; <label>:22:                                     ; preds = %18
  store i32 2, i32* %6, align 4
  %23 = bitcast i64* %5 to i8*, !dbg !20
  call void @llvm.lifetime.end(i64 8, i8* %23) #1, !dbg !20
  br label %47

; <label>:24:                                     ; preds = %18
  %25 = bitcast i64* %7 to i8*, !dbg !21
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !21
  store i64 0, i64* %7, align 8, !dbg !22, !tbaa !7
  br label %26, !dbg !21

; <label>:26:                                     ; preds = %40, %24
  %27 = load i64, i64* %7, align 8, !dbg !23, !tbaa !7
  %28 = load i64, i64* %3, align 8, !dbg !24, !tbaa !7
  %29 = icmp ne i64 %27, %28, !dbg !25
  br i1 %29, label %32, label %30, !dbg !26

; <label>:30:                                     ; preds = %26
  store i32 5, i32* %6, align 4
  %31 = bitcast i64* %7 to i8*, !dbg !26
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !26
  br label %43

; <label>:32:                                     ; preds = %26
  %33 = load double*, double** %4, align 8, !dbg !27, !tbaa !11
  %34 = load i64, i64* %7, align 8, !dbg !28, !tbaa !7
  %35 = load i64, i64* %5, align 8, !dbg !29, !tbaa !7
  %36 = load i64, i64* %3, align 8, !dbg !30, !tbaa !7
  %37 = mul nsw i64 %35, %36, !dbg !31
  %38 = add nsw i64 %34, %37, !dbg !32
  %39 = getelementptr inbounds double, double* %33, i64 %38, !dbg !27
  store double 0x40091EB860000000, double* %39, align 8, !dbg !33, !tbaa !34
  br label %40, !dbg !27

; <label>:40:                                     ; preds = %32
  %41 = load i64, i64* %7, align 8, !dbg !36, !tbaa !7
  %42 = add nsw i64 %41, 1, !dbg !36
  store i64 %42, i64* %7, align 8, !dbg !36, !tbaa !7
  br label %26, !dbg !26, !llvm.loop !37

; <label>:43:                                     ; preds = %30
  br label %44, !dbg !38

; <label>:44:                                     ; preds = %43
  %45 = load i64, i64* %5, align 8, !dbg !39, !tbaa !7
  %46 = add nsw i64 %45, 1, !dbg !39
  store i64 %46, i64* %5, align 8, !dbg !39, !tbaa !7
  br label %18, !dbg !20, !llvm.loop !40

; <label>:47:                                     ; preds = %22
  ret void, !dbg !42
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind
define void @_Z15fill_pi_loop_NMllPd(i64, i64, double* noalias) #0 !dbg !43 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca double*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32
  %9 = alloca i64, align 8
  store i64 %0, i64* %4, align 8, !tbaa !7
  store i64 %1, i64* %5, align 8, !tbaa !7
  store double* %2, double** %6, align 8, !tbaa !11
  %10 = load i64, i64* %4, align 8, !dbg !44, !tbaa !7
  %11 = srem i64 %10, 32, !dbg !44
  %12 = icmp eq i64 %11, 0, !dbg !44
  call void @llvm.assume(i1 %12), !dbg !44
  %13 = load i64, i64* %5, align 8, !dbg !45, !tbaa !7
  %14 = srem i64 %13, 32, !dbg !45
  %15 = icmp eq i64 %14, 0, !dbg !45
  call void @llvm.assume(i1 %15), !dbg !45
  %16 = load double*, double** %6, align 8, !dbg !46, !tbaa !11
  %17 = bitcast double* %16 to i8*, !dbg !46
  %18 = ptrtoint i8* %17 to i64, !dbg !46
  %19 = and i64 %18, 31, !dbg !46
  %20 = icmp eq i64 %19, 0, !dbg !46
  call void @llvm.assume(i1 %20), !dbg !46
  %21 = bitcast i8* %17 to double*, !dbg !46
  store double* %21, double** %6, align 8, !dbg !46, !tbaa !11
  %22 = bitcast i64* %7 to i8*, !dbg !47
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !47
  store i64 0, i64* %7, align 8, !dbg !48, !tbaa !7
  br label %23, !dbg !47

; <label>:23:                                     ; preds = %49, %3
  %24 = load i64, i64* %7, align 8, !dbg !49, !tbaa !7
  %25 = load i64, i64* %5, align 8, !dbg !50, !tbaa !7
  %26 = icmp ne i64 %24, %25, !dbg !51
  br i1 %26, label %29, label %27, !dbg !52

; <label>:27:                                     ; preds = %23
  store i32 2, i32* %8, align 4
  %28 = bitcast i64* %7 to i8*, !dbg !52
  call void @llvm.lifetime.end(i64 8, i8* %28) #1, !dbg !52
  br label %52

; <label>:29:                                     ; preds = %23
  %30 = bitcast i64* %9 to i8*, !dbg !53
  call void @llvm.lifetime.start(i64 8, i8* %30) #1, !dbg !53
  store i64 0, i64* %9, align 8, !dbg !54, !tbaa !7
  br label %31, !dbg !53

; <label>:31:                                     ; preds = %45, %29
  %32 = load i64, i64* %9, align 8, !dbg !55, !tbaa !7
  %33 = load i64, i64* %4, align 8, !dbg !56, !tbaa !7
  %34 = icmp ne i64 %32, %33, !dbg !57
  br i1 %34, label %37, label %35, !dbg !58

; <label>:35:                                     ; preds = %31
  store i32 5, i32* %8, align 4
  %36 = bitcast i64* %9 to i8*, !dbg !58
  call void @llvm.lifetime.end(i64 8, i8* %36) #1, !dbg !58
  br label %48

; <label>:37:                                     ; preds = %31
  %38 = load double*, double** %6, align 8, !dbg !59, !tbaa !11
  %39 = load i64, i64* %9, align 8, !dbg !60, !tbaa !7
  %40 = load i64, i64* %7, align 8, !dbg !61, !tbaa !7
  %41 = load i64, i64* %4, align 8, !dbg !62, !tbaa !7
  %42 = mul nsw i64 %40, %41, !dbg !63
  %43 = add nsw i64 %39, %42, !dbg !64
  %44 = getelementptr inbounds double, double* %38, i64 %43, !dbg !59
  store double 0x40091EB860000000, double* %44, align 8, !dbg !65, !tbaa !34
  br label %45, !dbg !59

; <label>:45:                                     ; preds = %37
  %46 = load i64, i64* %9, align 8, !dbg !66, !tbaa !7
  %47 = add nsw i64 %46, 1, !dbg !66
  store i64 %47, i64* %9, align 8, !dbg !66, !tbaa !7
  br label %31, !dbg !58, !llvm.loop !67

; <label>:48:                                     ; preds = %35
  br label %49, !dbg !68

; <label>:49:                                     ; preds = %48
  %50 = load i64, i64* %7, align 8, !dbg !69, !tbaa !7
  %51 = add nsw i64 %50, 1, !dbg !69
  store i64 %51, i64* %7, align 8, !dbg !69, !tbaa !7
  br label %23, !dbg !52, !llvm.loop !70

; <label>:52:                                     ; preds = %27
  ret void, !dbg !71
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_3.cpp", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "fill_pi_loop_NN", scope: !1, file: !1, line: 732, type: !6, isLocal: false, isDefinition: true, scopeLine: 736, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !{!8, !8, i64 0}
!8 = !{!"long", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"any pointer", !9, i64 0}
!13 = !DILocation(line: 737, column: 5, scope: !5)
!14 = !DILocation(line: 738, column: 5, scope: !5)
!15 = !DILocation(line: 741, column: 10, scope: !5)
!16 = !DILocation(line: 741, column: 25, scope: !5)
!17 = !DILocation(line: 741, column: 32, scope: !5)
!18 = !DILocation(line: 741, column: 37, scope: !5)
!19 = !DILocation(line: 741, column: 34, scope: !5)
!20 = !DILocation(line: 741, column: 5, scope: !5)
!21 = !DILocation(line: 742, column: 14, scope: !5)
!22 = !DILocation(line: 742, column: 29, scope: !5)
!23 = !DILocation(line: 742, column: 36, scope: !5)
!24 = !DILocation(line: 742, column: 41, scope: !5)
!25 = !DILocation(line: 742, column: 38, scope: !5)
!26 = !DILocation(line: 742, column: 9, scope: !5)
!27 = !DILocation(line: 743, column: 13, scope: !5)
!28 = !DILocation(line: 743, column: 15, scope: !5)
!29 = !DILocation(line: 743, column: 19, scope: !5)
!30 = !DILocation(line: 743, column: 23, scope: !5)
!31 = !DILocation(line: 743, column: 21, scope: !5)
!32 = !DILocation(line: 743, column: 17, scope: !5)
!33 = !DILocation(line: 743, column: 26, scope: !5)
!34 = !{!35, !35, i64 0}
!35 = !{!"double", !9, i64 0}
!36 = !DILocation(line: 742, column: 44, scope: !5)
!37 = distinct !{!37, !26, !38}
!38 = !DILocation(line: 743, column: 28, scope: !5)
!39 = !DILocation(line: 741, column: 40, scope: !5)
!40 = distinct !{!40, !20, !38, !41}
!41 = !{!"llvm.loop.vectorize.enable", i1 true}
!42 = !DILocation(line: 744, column: 1, scope: !5)
!43 = distinct !DISubprogram(name: "fill_pi_loop_NM", scope: !1, file: !1, line: 746, type: !6, isLocal: false, isDefinition: true, scopeLine: 751, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!44 = !DILocation(line: 752, column: 5, scope: !43)
!45 = !DILocation(line: 753, column: 5, scope: !43)
!46 = !DILocation(line: 754, column: 5, scope: !43)
!47 = !DILocation(line: 757, column: 10, scope: !43)
!48 = !DILocation(line: 757, column: 25, scope: !43)
!49 = !DILocation(line: 757, column: 32, scope: !43)
!50 = !DILocation(line: 757, column: 37, scope: !43)
!51 = !DILocation(line: 757, column: 34, scope: !43)
!52 = !DILocation(line: 757, column: 5, scope: !43)
!53 = !DILocation(line: 758, column: 14, scope: !43)
!54 = !DILocation(line: 758, column: 29, scope: !43)
!55 = !DILocation(line: 758, column: 36, scope: !43)
!56 = !DILocation(line: 758, column: 41, scope: !43)
!57 = !DILocation(line: 758, column: 38, scope: !43)
!58 = !DILocation(line: 758, column: 9, scope: !43)
!59 = !DILocation(line: 759, column: 13, scope: !43)
!60 = !DILocation(line: 759, column: 15, scope: !43)
!61 = !DILocation(line: 759, column: 19, scope: !43)
!62 = !DILocation(line: 759, column: 23, scope: !43)
!63 = !DILocation(line: 759, column: 21, scope: !43)
!64 = !DILocation(line: 759, column: 17, scope: !43)
!65 = !DILocation(line: 759, column: 26, scope: !43)
!66 = !DILocation(line: 758, column: 44, scope: !43)
!67 = distinct !{!67, !58, !68}
!68 = !DILocation(line: 759, column: 28, scope: !43)
!69 = !DILocation(line: 757, column: 40, scope: !43)
!70 = distinct !{!70, !52, !68, !41}
!71 = !DILocation(line: 760, column: 1, scope: !43)
