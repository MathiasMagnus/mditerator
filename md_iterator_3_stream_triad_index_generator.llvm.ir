; ModuleID = 'md_iterator_3.cpp'
source_filename = "md_iterator_3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"class.std::__1::__libcpp_compressed_pair_imp" }
%"class.std::__1::__libcpp_compressed_pair_imp" = type { double* }

; Function Attrs: nounwind
define void @_Z12stream_triadlRNSt3__16vectorIdNS_9allocatorIdEEEERKS3_dS6_(i64, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::vector"* nocapture readonly dereferenceable(24), double, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 !dbg !5 {
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0, !dbg !7
  %7 = load double*, double** %6, align 8, !dbg !7, !tbaa !11
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0, !dbg !17
  %9 = load double*, double** %8, align 8, !dbg !17, !tbaa !11
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0, !dbg !20
  %11 = load double*, double** %10, align 8, !dbg !20, !tbaa !11
  %12 = and i64 %0, 31, !dbg !22
  %13 = icmp eq i64 %12, 0, !dbg !22
  tail call void @llvm.assume(i1 %13), !dbg !22
  %14 = ptrtoint double* %7 to i64, !dbg !23
  %15 = and i64 %14, 31, !dbg !23
  %16 = icmp eq i64 %15, 0, !dbg !23
  tail call void @llvm.assume(i1 %16), !dbg !23
  %17 = ptrtoint double* %9 to i64, !dbg !24
  %18 = and i64 %17, 31, !dbg !24
  %19 = icmp eq i64 %18, 0, !dbg !24
  tail call void @llvm.assume(i1 %19), !dbg !24
  %20 = ptrtoint double* %11 to i64, !dbg !25
  %21 = and i64 %20, 31, !dbg !25
  %22 = icmp eq i64 %21, 0, !dbg !25
  tail call void @llvm.assume(i1 %22), !dbg !25
  %23 = icmp sgt i64 %0, 0, !dbg !26
  tail call void @llvm.assume(i1 %23) #1, !dbg !33, !noalias !34
  %24 = icmp ult i64 %0, 16
  %25 = insertelement <4 x double> undef, double %3, i32 0
  %26 = shufflevector <4 x double> %25, <4 x double> undef, <4 x i32> zeroinitializer
  br label %27, !dbg !37

; <label>:27:                                     ; preds = %147, %5
  %28 = phi i64 [ %148, %147 ], [ 0, %5 ]
  %29 = mul i64 %28, %0, !dbg !38
  %30 = getelementptr double, double* %7, i64 %29, !dbg !38
  %31 = add i64 %29, %0, !dbg !38
  %32 = getelementptr double, double* %7, i64 %31, !dbg !38
  br i1 %24, label %33, label %39, !dbg !38

; <label>:33:                                     ; preds = %39, %27
  br i1 false, label %141, label %34, !dbg !38

; <label>:34:                                     ; preds = %33
  %35 = mul nsw i64 %28, %0
  %36 = mul nsw i64 %28, %0
  %37 = mul nsw i64 %28, %0
  %38 = mul nsw i64 %28, %0
  br label %99, !dbg !38

; <label>:39:                                     ; preds = %27
  %40 = getelementptr double, double* %11, i64 %31, !dbg !38
  %41 = getelementptr double, double* %11, i64 %29, !dbg !38
  %42 = getelementptr double, double* %9, i64 %31, !dbg !38
  %43 = getelementptr double, double* %9, i64 %29, !dbg !38
  %44 = icmp ult double* %30, %42, !dbg !38
  %45 = icmp ult double* %43, %32, !dbg !38
  %46 = and i1 %44, %45, !dbg !38
  %47 = icmp ult double* %30, %40, !dbg !38
  %48 = icmp ult double* %41, %32, !dbg !38
  %49 = and i1 %47, %48, !dbg !38
  %50 = or i1 %46, %49, !dbg !38
  br i1 %50, label %33, label %51, !dbg !38

; <label>:51:                                     ; preds = %39
  %52 = mul nsw i64 %28, %0
  br label %53, !dbg !38

; <label>:53:                                     ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %96, %53 ], !dbg !39
  %55 = add nsw i64 %52, %54, !dbg !44
  %56 = getelementptr inbounds double, double* %9, i64 %55, !dbg !45
  %57 = bitcast double* %56 to <4 x double>*, !dbg !45
  %58 = load <4 x double>, <4 x double>* %57, align 32, !dbg !45, !tbaa !46, !alias.scope !48
  %59 = getelementptr double, double* %56, i64 4, !dbg !45
  %60 = bitcast double* %59 to <4 x double>*, !dbg !45
  %61 = load <4 x double>, <4 x double>* %60, align 32, !dbg !45, !tbaa !46, !alias.scope !48
  %62 = getelementptr double, double* %56, i64 8, !dbg !45
  %63 = bitcast double* %62 to <4 x double>*, !dbg !45
  %64 = load <4 x double>, <4 x double>* %63, align 32, !dbg !45, !tbaa !46, !alias.scope !48
  %65 = getelementptr double, double* %56, i64 12, !dbg !45
  %66 = bitcast double* %65 to <4 x double>*, !dbg !45
  %67 = load <4 x double>, <4 x double>* %66, align 32, !dbg !45, !tbaa !46, !alias.scope !48
  %68 = getelementptr inbounds double, double* %11, i64 %55, !dbg !51
  %69 = bitcast double* %68 to <4 x double>*, !dbg !51
  %70 = load <4 x double>, <4 x double>* %69, align 32, !dbg !51, !tbaa !46, !alias.scope !52
  %71 = getelementptr double, double* %68, i64 4, !dbg !51
  %72 = bitcast double* %71 to <4 x double>*, !dbg !51
  %73 = load <4 x double>, <4 x double>* %72, align 32, !dbg !51, !tbaa !46, !alias.scope !52
  %74 = getelementptr double, double* %68, i64 8, !dbg !51
  %75 = bitcast double* %74 to <4 x double>*, !dbg !51
  %76 = load <4 x double>, <4 x double>* %75, align 32, !dbg !51, !tbaa !46, !alias.scope !52
  %77 = getelementptr double, double* %68, i64 12, !dbg !51
  %78 = bitcast double* %77 to <4 x double>*, !dbg !51
  %79 = load <4 x double>, <4 x double>* %78, align 32, !dbg !51, !tbaa !46, !alias.scope !52
  %80 = fmul fast <4 x double> %70, %26, !dbg !54
  %81 = fmul fast <4 x double> %73, %26, !dbg !54
  %82 = fmul fast <4 x double> %76, %26, !dbg !54
  %83 = fmul fast <4 x double> %79, %26, !dbg !54
  %84 = fadd fast <4 x double> %80, %58, !dbg !55
  %85 = fadd fast <4 x double> %81, %61, !dbg !55
  %86 = fadd fast <4 x double> %82, %64, !dbg !55
  %87 = fadd fast <4 x double> %83, %67, !dbg !55
  %88 = getelementptr inbounds double, double* %7, i64 %55, !dbg !56
  %89 = bitcast double* %88 to <4 x double>*, !dbg !57
  store <4 x double> %84, <4 x double>* %89, align 32, !dbg !57, !tbaa !46, !alias.scope !58, !noalias !60
  %90 = getelementptr double, double* %88, i64 4, !dbg !57
  %91 = bitcast double* %90 to <4 x double>*, !dbg !57
  store <4 x double> %85, <4 x double>* %91, align 32, !dbg !57, !tbaa !46, !alias.scope !58, !noalias !60
  %92 = getelementptr double, double* %88, i64 8, !dbg !57
  %93 = bitcast double* %92 to <4 x double>*, !dbg !57
  store <4 x double> %86, <4 x double>* %93, align 32, !dbg !57, !tbaa !46, !alias.scope !58, !noalias !60
  %94 = getelementptr double, double* %88, i64 12, !dbg !57
  %95 = bitcast double* %94 to <4 x double>*, !dbg !57
  store <4 x double> %87, <4 x double>* %95, align 32, !dbg !57, !tbaa !46, !alias.scope !58, !noalias !60
  %96 = add i64 %54, 16, !dbg !39
  %97 = icmp eq i64 %96, %0, !dbg !39
  br i1 %97, label %146, label %53, !dbg !39, !llvm.loop !61

; <label>:98:                                     ; preds = %147
  ret void, !dbg !66

; <label>:99:                                     ; preds = %99, %34
  %100 = phi i64 [ 0, %34 ], [ %137, %99 ]
  %101 = phi i64 [ %0, %34 ], [ %138, %99 ]
  %102 = add nsw i64 %35, %100, !dbg !44
  %103 = getelementptr inbounds double, double* %9, i64 %102, !dbg !45
  %104 = load double, double* %103, align 32, !dbg !45, !tbaa !46
  %105 = getelementptr inbounds double, double* %11, i64 %102, !dbg !51
  %106 = load double, double* %105, align 32, !dbg !51, !tbaa !46
  %107 = fmul fast double %106, %3, !dbg !54
  %108 = fadd fast double %107, %104, !dbg !55
  %109 = getelementptr inbounds double, double* %7, i64 %102, !dbg !56
  store double %108, double* %109, align 32, !dbg !57, !tbaa !46
  %110 = or i64 %100, 1, !dbg !39
  %111 = add nsw i64 %36, %110, !dbg !44
  %112 = getelementptr inbounds double, double* %9, i64 %111, !dbg !45
  %113 = load double, double* %112, align 8, !dbg !45, !tbaa !46
  %114 = getelementptr inbounds double, double* %11, i64 %111, !dbg !51
  %115 = load double, double* %114, align 8, !dbg !51, !tbaa !46
  %116 = fmul fast double %115, %3, !dbg !54
  %117 = fadd fast double %116, %113, !dbg !55
  %118 = getelementptr inbounds double, double* %7, i64 %111, !dbg !56
  store double %117, double* %118, align 8, !dbg !57, !tbaa !46
  %119 = or i64 %100, 2, !dbg !39
  %120 = add nsw i64 %37, %119, !dbg !44
  %121 = getelementptr inbounds double, double* %9, i64 %120, !dbg !45
  %122 = load double, double* %121, align 16, !dbg !45, !tbaa !46
  %123 = getelementptr inbounds double, double* %11, i64 %120, !dbg !51
  %124 = load double, double* %123, align 16, !dbg !51, !tbaa !46
  %125 = fmul fast double %124, %3, !dbg !54
  %126 = fadd fast double %125, %122, !dbg !55
  %127 = getelementptr inbounds double, double* %7, i64 %120, !dbg !56
  store double %126, double* %127, align 16, !dbg !57, !tbaa !46
  %128 = or i64 %100, 3, !dbg !39
  %129 = add nsw i64 %38, %128, !dbg !44
  %130 = getelementptr inbounds double, double* %9, i64 %129, !dbg !45
  %131 = load double, double* %130, align 8, !dbg !45, !tbaa !46
  %132 = getelementptr inbounds double, double* %11, i64 %129, !dbg !51
  %133 = load double, double* %132, align 8, !dbg !51, !tbaa !46
  %134 = fmul fast double %133, %3, !dbg !54
  %135 = fadd fast double %134, %131, !dbg !55
  %136 = getelementptr inbounds double, double* %7, i64 %129, !dbg !56
  store double %135, double* %136, align 8, !dbg !57, !tbaa !46
  %137 = add nsw i64 %100, 4, !dbg !39
  %138 = add i64 %101, -4, !dbg !67
  %139 = icmp eq i64 %138, 0, !dbg !67
  br i1 %139, label %140, label %99, !dbg !67, !llvm.loop !68

; <label>:140:                                    ; preds = %99
  br label %141, !dbg !69

; <label>:141:                                    ; preds = %140, %33
  br i1 false, label %142, label %145, !dbg !69

; <label>:142:                                    ; preds = %141
  br label %143, !dbg !69

; <label>:143:                                    ; preds = %143, %142
  br i1 true, label %144, label %143, !dbg !67, !llvm.loop !70

; <label>:144:                                    ; preds = %143
  br label %145, !dbg !69

; <label>:145:                                    ; preds = %141, %144
  br label %147, !dbg !69

; <label>:146:                                    ; preds = %53
  br label %147, !dbg !69

; <label>:147:                                    ; preds = %146, %145
  %148 = add nuw nsw i64 %28, 1, !dbg !69
  %149 = icmp eq i64 %148, %0, !dbg !72
  br i1 %149, label %98, label %27, !dbg !73, !llvm.loop !74
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_3.cpp", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "stream_triad", scope: !1, file: !1, line: 660, type: !6, isLocal: false, isDefinition: true, scopeLine: 667, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !DILocation(line: 671, column: 47, scope: !8, inlinedAt: !10)
!8 = distinct !DISubprogram(name: "data", scope: !9, file: !9, line: 670, type: !6, isLocal: false, isDefinition: true, scopeLine: 671, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!9 = !DIFile(filename: "/global/u1/w/wash/development/gor-llvm/INSTALL_RELEASE/bin/../include/c++/v1/vector", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!10 = distinct !DILocation(line: 668, column: 39, scope: !5)
!11 = !{!12, !13, i64 0}
!12 = !{!"_ZTSNSt3__113__vector_baseIdNS_9allocatorIdEEEE", !13, i64 0, !13, i64 8, !16, i64 16}
!13 = !{!"any pointer", !14, i64 0}
!14 = !{!"omnipotent char", !15, i64 0}
!15 = !{!"Simple C++ TBAA"}
!16 = !{!"_ZTSNSt3__117__compressed_pairIPdNS_9allocatorIdEEEE"}
!17 = !DILocation(line: 674, column: 47, scope: !18, inlinedAt: !19)
!18 = distinct !DISubprogram(name: "data", scope: !9, file: !9, line: 673, type: !6, isLocal: false, isDefinition: true, scopeLine: 674, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!19 = distinct !DILocation(line: 669, column: 39, scope: !5)
!20 = !DILocation(line: 674, column: 47, scope: !18, inlinedAt: !21)
!21 = distinct !DILocation(line: 670, column: 39, scope: !5)
!22 = !DILocation(line: 672, column: 5, scope: !5)
!23 = !DILocation(line: 673, column: 5, scope: !5)
!24 = !DILocation(line: 674, column: 5, scope: !5)
!25 = !DILocation(line: 675, column: 5, scope: !5)
!26 = !DILocation(line: 462, column: 9, scope: !27, inlinedAt: !28)
!27 = distinct !DISubprogram(name: "generate", scope: !1, file: !1, line: 460, type: !6, isLocal: false, isDefinition: true, scopeLine: 461, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!28 = distinct !DILocation(line: 242, column: 9, scope: !29, inlinedAt: !30)
!29 = distinct !DISubprogram(name: "resume", scope: !1, file: !1, line: 240, type: !6, isLocal: false, isDefinition: true, scopeLine: 241, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!30 = distinct !DILocation(line: 451, column: 11, scope: !31, inlinedAt: !32)
!31 = distinct !DISubprogram(name: "begin", scope: !1, file: !1, line: 449, type: !6, isLocal: false, isDefinition: true, scopeLine: 450, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!32 = distinct !DILocation(line: 678, column: 19, scope: !5)
!33 = !DILocation(line: 463, column: 9, scope: !27, inlinedAt: !28)
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN18index_2d_generator8generateEll.resume: argument 0"}
!36 = distinct !{!36, !"_ZN18index_2d_generator8generateEll.resume"}
!37 = !DILocation(line: 678, column: 19, scope: !5)
!38 = !DILocation(line: 679, column: 48, scope: !5)
!39 = !DILocation(line: 465, column: 45, scope: !27, inlinedAt: !40)
!40 = distinct !DILocation(line: 242, column: 9, scope: !29, inlinedAt: !41)
!41 = distinct !DILocation(line: 429, column: 18, scope: !42, inlinedAt: !43)
!42 = distinct !DISubprogram(name: "operator++", scope: !1, file: !1, line: 427, type: !6, isLocal: false, isDefinition: true, scopeLine: 428, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!43 = distinct !DILocation(line: 678, column: 19, scope: !5)
!44 = !DILocation(line: 679, column: 40, scope: !5)
!45 = !DILocation(line: 679, column: 32, scope: !5)
!46 = !{!47, !47, i64 0}
!47 = !{!"double", !14, i64 0}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !DILocation(line: 679, column: 59, scope: !5)
!52 = !{!53}
!53 = distinct !{!53, !50}
!54 = !DILocation(line: 679, column: 57, scope: !5)
!55 = !DILocation(line: 679, column: 53, scope: !5)
!56 = !DILocation(line: 679, column: 9, scope: !5)
!57 = !DILocation(line: 679, column: 30, scope: !5)
!58 = !{!59}
!59 = distinct !{!59, !50}
!60 = !{!49, !53}
!61 = distinct !{!61, !62, !63, !64, !65}
!62 = !DILocation(line: 465, column: 13, scope: !27)
!63 = !DILocation(line: 466, column: 17, scope: !27)
!64 = !{!"llvm.loop.vectorize.width", i32 1}
!65 = !{!"llvm.loop.interleave.count", i32 1}
!66 = !DILocation(line: 680, column: 1, scope: !5)
!67 = !DILocation(line: 465, column: 13, scope: !27, inlinedAt: !40)
!68 = distinct !{!68, !62, !63, !64, !65}
!69 = !DILocation(line: 464, column: 41, scope: !27, inlinedAt: !40)
!70 = distinct !{!70, !71}
!71 = !{!"llvm.loop.unroll.disable"}
!72 = !DILocation(line: 464, column: 34, scope: !27, inlinedAt: !40)
!73 = !DILocation(line: 464, column: 9, scope: !27, inlinedAt: !40)
!74 = distinct !{!74, !75, !63}
!75 = !DILocation(line: 464, column: 9, scope: !27)
