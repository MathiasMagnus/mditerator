; ModuleID = 'md_iterator_2.cpp'
source_filename = "md_iterator_2.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
define void @_Z14transform_looplPd(i64, double* noalias) local_unnamed_addr #0 !dbg !5 {
  %3 = and i64 %0, 31, !dbg !7
  %4 = icmp eq i64 %3, 0, !dbg !7
  tail call void @llvm.assume(i1 %4), !dbg !8
  %5 = ptrtoint double* %1 to i64, !dbg !9
  %6 = and i64 %5, 31, !dbg !9
  %7 = icmp eq i64 %6, 0, !dbg !9
  tail call void @llvm.assume(i1 %7), !dbg !9
  %8 = icmp sgt i64 %0, 0, !dbg !10
  br i1 %8, label %9, label %56, !dbg !11

; <label>:9:                                      ; preds = %2
  br i1 false, label %44, label %10

; <label>:10:                                     ; preds = %9
  %11 = icmp ult i64 %0, 16
  %12 = icmp ult i64 %0, 16
  br label %13

; <label>:13:                                     ; preds = %80, %10
  %14 = phi i64 [ 0, %10 ], [ %81, %80 ]
  %15 = phi i64 [ %0, %10 ], [ %82, %80 ]
  %16 = mul nsw i64 %14, %0
  br i1 %11, label %18, label %17, !dbg !12

; <label>:17:                                     ; preds = %13
  br label %19, !dbg !13

; <label>:18:                                     ; preds = %13
  br label %32, !dbg !13

; <label>:19:                                     ; preds = %17, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %17 ], !dbg !14
  %21 = add nsw i64 %20, %16, !dbg !13
  %22 = getelementptr inbounds double, double* %1, i64 %21, !dbg !15
  %23 = bitcast double* %22 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %23, align 32, !dbg !16, !tbaa !17
  %24 = getelementptr double, double* %22, i64 4, !dbg !16
  %25 = bitcast double* %24 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %25, align 32, !dbg !16, !tbaa !17
  %26 = getelementptr double, double* %22, i64 8, !dbg !16
  %27 = bitcast double* %26 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %27, align 32, !dbg !16, !tbaa !17
  %28 = getelementptr double, double* %22, i64 12, !dbg !16
  %29 = bitcast double* %28 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %29, align 32, !dbg !16, !tbaa !17
  %30 = add i64 %20, 16, !dbg !14
  %31 = icmp eq i64 %30, %0, !dbg !14
  br i1 %31, label %39, label %19, !dbg !14, !llvm.loop !21

; <label>:32:                                     ; preds = %18, %32
  %33 = phi i64 [ %36, %32 ], [ 0, %18 ]
  %34 = add nsw i64 %33, %16, !dbg !13
  %35 = getelementptr inbounds double, double* %1, i64 %34, !dbg !15
  store double 0x40091EB860000000, double* %35, align 8, !dbg !16, !tbaa !17
  %36 = add nuw nsw i64 %33, 1, !dbg !14
  %37 = icmp eq i64 %36, %0, !dbg !25
  br i1 %37, label %38, label %32, !dbg !12, !llvm.loop !26

; <label>:38:                                     ; preds = %32
  br label %40, !dbg !28

; <label>:39:                                     ; preds = %19
  br label %40, !dbg !28

; <label>:40:                                     ; preds = %39, %38
  %41 = or i64 %14, 1, !dbg !28
  %42 = mul nsw i64 %41, %0
  br i1 %12, label %72, label %57, !dbg !12

; <label>:43:                                     ; preds = %80
  br label %44, !dbg !29

; <label>:44:                                     ; preds = %43, %9
  br i1 false, label %45, label %55, !dbg !29

; <label>:45:                                     ; preds = %44
  br label %46, !dbg !29

; <label>:46:                                     ; preds = %45
  br i1 undef, label %50, label %47, !dbg !12

; <label>:47:                                     ; preds = %46
  br label %48, !dbg !13

; <label>:48:                                     ; preds = %48, %47
  br i1 true, label %49, label %48, !dbg !14, !llvm.loop !21

; <label>:49:                                     ; preds = %48
  br label %53, !dbg !28

; <label>:50:                                     ; preds = %46
  br label %51, !dbg !13

; <label>:51:                                     ; preds = %51, %50
  br i1 true, label %52, label %51, !dbg !12, !llvm.loop !26

; <label>:52:                                     ; preds = %51
  br label %53, !dbg !28

; <label>:53:                                     ; preds = %52, %49
  br label %54, !dbg !11

; <label>:54:                                     ; preds = %53
  br label %55, !dbg !29

; <label>:55:                                     ; preds = %44, %54
  br label %56, !dbg !29

; <label>:56:                                     ; preds = %55, %2
  ret void, !dbg !29

; <label>:57:                                     ; preds = %40
  br label %58, !dbg !13

; <label>:58:                                     ; preds = %58, %57
  %59 = phi i64 [ %69, %58 ], [ 0, %57 ], !dbg !14
  %60 = add nsw i64 %59, %42, !dbg !13
  %61 = getelementptr inbounds double, double* %1, i64 %60, !dbg !15
  %62 = bitcast double* %61 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %62, align 32, !dbg !16, !tbaa !17
  %63 = getelementptr double, double* %61, i64 4, !dbg !16
  %64 = bitcast double* %63 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %64, align 32, !dbg !16, !tbaa !17
  %65 = getelementptr double, double* %61, i64 8, !dbg !16
  %66 = bitcast double* %65 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %66, align 32, !dbg !16, !tbaa !17
  %67 = getelementptr double, double* %61, i64 12, !dbg !16
  %68 = bitcast double* %67 to <4 x double>*, !dbg !16
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %68, align 32, !dbg !16, !tbaa !17
  %69 = add i64 %59, 16, !dbg !14
  %70 = icmp eq i64 %69, %0, !dbg !14
  br i1 %70, label %71, label %58, !dbg !14, !llvm.loop !21

; <label>:71:                                     ; preds = %58
  br label %80, !dbg !28

; <label>:72:                                     ; preds = %40
  br label %73, !dbg !13

; <label>:73:                                     ; preds = %73, %72
  %74 = phi i64 [ %77, %73 ], [ 0, %72 ]
  %75 = add nsw i64 %74, %42, !dbg !13
  %76 = getelementptr inbounds double, double* %1, i64 %75, !dbg !15
  store double 0x40091EB860000000, double* %76, align 8, !dbg !16, !tbaa !17
  %77 = add nuw nsw i64 %74, 1, !dbg !14
  %78 = icmp eq i64 %77, %0, !dbg !25
  br i1 %78, label %79, label %73, !dbg !12, !llvm.loop !26

; <label>:79:                                     ; preds = %73
  br label %80, !dbg !28

; <label>:80:                                     ; preds = %79, %71
  %81 = add nsw i64 %14, 2, !dbg !28
  %82 = add i64 %15, -2, !dbg !11
  %83 = icmp eq i64 %82, 0, !dbg !11
  br i1 %83, label %43, label %13, !dbg !11, !llvm.loop !30
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_2.cpp", directory: "/global/homes/w/wash/sandbox/cxx/coroutines")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "transform_loop", scope: !1, file: !1, line: 275, type: !6, isLocal: false, isDefinition: true, scopeLine: 276, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !DILocation(line: 277, column: 31, scope: !5)
!8 = !DILocation(line: 277, column: 5, scope: !5)
!9 = !DILocation(line: 279, column: 32, scope: !5)
!10 = !DILocation(line: 282, column: 34, scope: !5)
!11 = !DILocation(line: 282, column: 5, scope: !5)
!12 = !DILocation(line: 283, column: 9, scope: !5)
!13 = !DILocation(line: 284, column: 17, scope: !5)
!14 = !DILocation(line: 283, column: 43, scope: !5)
!15 = !DILocation(line: 284, column: 13, scope: !5)
!16 = !DILocation(line: 284, column: 26, scope: !5)
!17 = !{!18, !18, i64 0}
!18 = !{!"double", !19, i64 0}
!19 = !{!"omnipotent char", !20, i64 0}
!20 = !{!"Simple C++ TBAA"}
!21 = distinct !{!21, !12, !22, !23, !24}
!22 = !DILocation(line: 284, column: 28, scope: !5)
!23 = !{!"llvm.loop.vectorize.width", i32 1}
!24 = !{!"llvm.loop.interleave.count", i32 1}
!25 = !DILocation(line: 283, column: 38, scope: !5)
!26 = distinct !{!26, !12, !22, !27, !23, !24}
!27 = !{!"llvm.loop.unroll.runtime.disable"}
!28 = !DILocation(line: 282, column: 39, scope: !5)
!29 = !DILocation(line: 285, column: 1, scope: !5)
!30 = distinct !{!30, !11, !22, !31}
!31 = !{!"llvm.loop.vectorize.enable", i1 true}
