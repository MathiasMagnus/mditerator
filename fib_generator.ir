; ModuleID = 'fib_generator.cpp'
source_filename = "fib_generator.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%_Z3fibi.Frame = type { void (%_Z3fibi.Frame*)*, void (%_Z3fibi.Frame*)*, %"struct.generator<int>::promise_type", i2, i32, i32 }
%"struct.generator<int>::promise_type" = type { i32 }
%struct.generator = type { %"struct.std::experimental::coroutines_v1::coroutine_handle" }
%"struct.std::experimental::coroutines_v1::coroutine_handle" = type { %"struct.std::experimental::coroutines_v1::coroutine_handle.0" }
%"struct.std::experimental::coroutines_v1::coroutine_handle.0" = type { i8* }

@_Z3fibi.resumers = private constant [3 x void (%_Z3fibi.Frame*)*] [void (%_Z3fibi.Frame*)* @_Z3fibi.resume, void (%_Z3fibi.Frame*)* @_Z3fibi.destroy, void (%_Z3fibi.Frame*)* @_Z3fibi.cleanup]

; Function Attrs: nounwind
define void @_Z3fibi(%struct.generator* noalias nocapture sret, i32) #0 {
  %3 = tail call i8* @_Znwm(i64 32) #2
  %4 = bitcast i8* %3 to void (%_Z3fibi.Frame*)**
  store void (%_Z3fibi.Frame*)* @_Z3fibi.resume, void (%_Z3fibi.Frame*)** %4, align 8
  %5 = select i1 true, void (%_Z3fibi.Frame*)* @_Z3fibi.destroy, void (%_Z3fibi.Frame*)* @_Z3fibi.cleanup
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to void (%_Z3fibi.Frame*)**
  store void (%_Z3fibi.Frame*)* %5, void (%_Z3fibi.Frame*)** %7, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 16
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 %1, i32* %10, align 4
  tail call void @llvm.lifetime.start(i64 4, i8* nonnull %8) #2
  %11 = ptrtoint i8* %3 to i64
  %12 = getelementptr inbounds i8, i8* %3, i64 20
  %13 = bitcast i8* %12 to i2*
  store i2 0, i2* %13, align 1
  %14 = bitcast %struct.generator* %0 to i64*
  store i64 %11, i64* %14, align 8
  ret void
}

; Function Attrs: argmemonly nounwind readonly
declare token @llvm.coro.id(i32, i8* readnone, i8* nocapture readonly, i8*) #1

; Function Attrs: nounwind
declare i1 @llvm.coro.alloc(token) #2

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @llvm.coro.begin(token, i8* writeonly) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind
define i32 @main() local_unnamed_addr #6 {
  br label %1

; <label>:1:                                      ; preds = %0
  tail call void @_Z5printi(i32 0) #2
  tail call void @_Z5printi(i32 1) #2
  tail call void @_Z5printi(i32 2) #2
  tail call void @_Z5printi(i32 3) #2
  tail call void @_Z5printi(i32 4) #2
  ret i32 0
}

declare void @_Z5printi(i32) local_unnamed_addr #7

; Function Attrs: nounwind
define internal fastcc void @_Z3fibi.resume(%_Z3fibi.Frame* noalias nonnull) #0 {
  %2 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 3
  %3 = load i2, i2* %2, align 1
  %4 = icmp eq i2 %3, 0
  br i1 %4, label %5, label %15

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %22

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 5
  br label %11

; <label>:11:                                     ; preds = %9, %15
  %12 = phi i32* [ %10, %9 ], [ %16, %15 ]
  %13 = phi i32 [ 0, %9 ], [ %20, %15 ]
  store i32 %13, i32* %12, align 4
  %14 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 2, i32 0
  store i32 %13, i32* %14, align 4, !tbaa !1
  store i2 1, i2* %2, align 1
  br label %24

; <label>:15:                                     ; preds = %1
  %16 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = add nuw nsw i32 %17, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %22

; <label>:22:                                     ; preds = %5, %15
  %23 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 0
  store void (%_Z3fibi.Frame*)* null, void (%_Z3fibi.Frame*)** %23, align 8
  br label %24

; <label>:24:                                     ; preds = %11, %22
  ret void
}

; Function Attrs: nounwind
define internal fastcc void @_Z3fibi.destroy(%_Z3fibi.Frame* noalias nonnull) #0 {
  %2 = bitcast %_Z3fibi.Frame* %0 to i8*
  %3 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 2
  %4 = bitcast %"struct.generator<int>::promise_type"* %3 to i8*
  tail call void @llvm.lifetime.end(i64 4, i8* nonnull %4) #2
  tail call void @_ZdlPv(i8* nonnull %2) #2
  ret void
}

; Function Attrs: nounwind
define internal fastcc void @_Z3fibi.cleanup(%_Z3fibi.Frame* noalias nonnull) #0 {
  %2 = getelementptr inbounds %_Z3fibi.Frame, %_Z3fibi.Frame* %0, i64 0, i32 2
  %3 = bitcast %"struct.generator<int>::promise_type"* %2 to i8*
  tail call void @llvm.lifetime.end(i64 4, i8* nonnull %3) #2
  ret void
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind readonly }
attributes #2 = { nounwind }
attributes #3 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!1 = !{!2, !3, i64 0}
!2 = !{!"_ZTSN9generatorIiE12promise_typeE", !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
