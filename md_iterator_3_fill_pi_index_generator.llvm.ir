; ModuleID = 'md_iterator_3.cpp'
source_filename = "md_iterator_3.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"class.std::__1::__libcpp_compressed_pair_imp" }
%"class.std::__1::__libcpp_compressed_pair_imp" = type { double* }

; Function Attrs: nounwind
define void @_Z20fill_pi_generator_NNlRNSt3__16vectorIdNS_9allocatorIdEEEE(i64, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 !dbg !5 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0, !dbg !7
  %4 = load double*, double** %3, align 8, !dbg !7, !tbaa !11
  %5 = and i64 %0, 31, !dbg !17
  %6 = icmp eq i64 %5, 0, !dbg !17
  tail call void @llvm.assume(i1 %6), !dbg !17
  %7 = ptrtoint double* %4 to i64, !dbg !18
  %8 = and i64 %7, 31, !dbg !18
  %9 = icmp eq i64 %8, 0, !dbg !18
  tail call void @llvm.assume(i1 %9), !dbg !18
  %10 = icmp sgt i64 %0, 0, !dbg !19
  tail call void @llvm.assume(i1 %10) #1, !dbg !26, !noalias !27
  br i1 false, label %35, label %11, !dbg !30

; <label>:11:                                     ; preds = %2
  %12 = icmp ult i64 %0, 16
  %13 = icmp ult i64 %0, 16
  br label %14, !dbg !30

; <label>:14:                                     ; preds = %82, %11
  %15 = phi i64 [ 0, %11 ], [ %83, %82 ]
  %16 = phi i64 [ %0, %11 ], [ %84, %82 ]
  br i1 %12, label %19, label %17, !dbg !31

; <label>:17:                                     ; preds = %14
  %18 = mul nsw i64 %15, %0
  br label %21, !dbg !31

; <label>:19:                                     ; preds = %14
  %20 = mul nsw i64 %15, %0
  br label %47, !dbg !31

; <label>:21:                                     ; preds = %17, %21
  %22 = phi i64 [ %32, %21 ], [ 0, %17 ], !dbg !32
  %23 = add nsw i64 %18, %22, !dbg !37
  %24 = getelementptr inbounds double, double* %4, i64 %23, !dbg !38
  %25 = bitcast double* %24 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %25, align 32, !dbg !39, !tbaa !40
  %26 = getelementptr double, double* %24, i64 4, !dbg !39
  %27 = bitcast double* %26 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %27, align 32, !dbg !39, !tbaa !40
  %28 = getelementptr double, double* %24, i64 8, !dbg !39
  %29 = bitcast double* %28 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %29, align 32, !dbg !39, !tbaa !40
  %30 = getelementptr double, double* %24, i64 12, !dbg !39
  %31 = bitcast double* %30 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %31, align 32, !dbg !39, !tbaa !40
  %32 = add i64 %22, 16, !dbg !32
  %33 = icmp eq i64 %32, %0, !dbg !32
  br i1 %33, label %54, label %21, !dbg !32, !llvm.loop !42

; <label>:34:                                     ; preds = %82
  br label %35, !dbg !47

; <label>:35:                                     ; preds = %34, %2
  br i1 false, label %36, label %46, !dbg !47

; <label>:36:                                     ; preds = %35
  br label %37, !dbg !47

; <label>:37:                                     ; preds = %36
  br i1 undef, label %41, label %38, !dbg !31

; <label>:38:                                     ; preds = %37
  br label %39, !dbg !31

; <label>:39:                                     ; preds = %39, %38
  br i1 true, label %40, label %39, !dbg !32, !llvm.loop !42

; <label>:40:                                     ; preds = %39
  br label %44, !dbg !48

; <label>:41:                                     ; preds = %37
  br label %42, !dbg !31

; <label>:42:                                     ; preds = %42, %41
  br i1 true, label %43, label %42, !dbg !49, !llvm.loop !50

; <label>:43:                                     ; preds = %42
  br label %44, !dbg !48

; <label>:44:                                     ; preds = %43, %40
  br label %45, !dbg !52

; <label>:45:                                     ; preds = %44
  br label %46, !dbg !47

; <label>:46:                                     ; preds = %35, %45
  ret void, !dbg !47

; <label>:47:                                     ; preds = %19, %47
  %48 = phi i64 [ %51, %47 ], [ 0, %19 ]
  %49 = add nsw i64 %20, %48, !dbg !37
  %50 = getelementptr inbounds double, double* %4, i64 %49, !dbg !38
  store double 0x40091EB860000000, double* %50, align 8, !dbg !39, !tbaa !40
  %51 = add nuw nsw i64 %48, 1, !dbg !32
  %52 = icmp eq i64 %51, %0, !dbg !53
  br i1 %52, label %53, label %47, !dbg !49, !llvm.loop !50

; <label>:53:                                     ; preds = %47
  br label %55, !dbg !48

; <label>:54:                                     ; preds = %21
  br label %55, !dbg !48

; <label>:55:                                     ; preds = %54, %53
  %56 = or i64 %15, 1, !dbg !48
  br i1 %13, label %73, label %57, !dbg !31

; <label>:57:                                     ; preds = %55
  %58 = mul nsw i64 %56, %0
  br label %59, !dbg !31

; <label>:59:                                     ; preds = %59, %57
  %60 = phi i64 [ %70, %59 ], [ 0, %57 ], !dbg !32
  %61 = add nsw i64 %58, %60, !dbg !37
  %62 = getelementptr inbounds double, double* %4, i64 %61, !dbg !38
  %63 = bitcast double* %62 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %63, align 32, !dbg !39, !tbaa !40
  %64 = getelementptr double, double* %62, i64 4, !dbg !39
  %65 = bitcast double* %64 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %65, align 32, !dbg !39, !tbaa !40
  %66 = getelementptr double, double* %62, i64 8, !dbg !39
  %67 = bitcast double* %66 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %67, align 32, !dbg !39, !tbaa !40
  %68 = getelementptr double, double* %62, i64 12, !dbg !39
  %69 = bitcast double* %68 to <4 x double>*, !dbg !39
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %69, align 32, !dbg !39, !tbaa !40
  %70 = add i64 %60, 16, !dbg !32
  %71 = icmp eq i64 %70, %0, !dbg !32
  br i1 %71, label %72, label %59, !dbg !32, !llvm.loop !42

; <label>:72:                                     ; preds = %59
  br label %82, !dbg !48

; <label>:73:                                     ; preds = %55
  %74 = mul nsw i64 %56, %0
  br label %75, !dbg !31

; <label>:75:                                     ; preds = %75, %73
  %76 = phi i64 [ %79, %75 ], [ 0, %73 ]
  %77 = add nsw i64 %74, %76, !dbg !37
  %78 = getelementptr inbounds double, double* %4, i64 %77, !dbg !38
  store double 0x40091EB860000000, double* %78, align 8, !dbg !39, !tbaa !40
  %79 = add nuw nsw i64 %76, 1, !dbg !32
  %80 = icmp eq i64 %79, %0, !dbg !53
  br i1 %80, label %81, label %75, !dbg !49, !llvm.loop !50

; <label>:81:                                     ; preds = %75
  br label %82, !dbg !48

; <label>:82:                                     ; preds = %81, %72
  %83 = add nsw i64 %15, 2, !dbg !48
  %84 = add i64 %16, -2, !dbg !52
  %85 = icmp eq i64 %84, 0, !dbg !52
  br i1 %85, label %34, label %14, !dbg !52, !llvm.loop !54
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #1

; Function Attrs: nounwind
define void @_Z20fill_pi_generator_NMllRNSt3__16vectorIdNS_9allocatorIdEEEE(i64, i64, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 !dbg !56 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0, !dbg !57
  %5 = load double*, double** %4, align 8, !dbg !57, !tbaa !11
  %6 = and i64 %0, 31, !dbg !59
  %7 = icmp eq i64 %6, 0, !dbg !59
  tail call void @llvm.assume(i1 %7), !dbg !59
  %8 = and i64 %1, 31, !dbg !60
  %9 = icmp eq i64 %8, 0, !dbg !60
  tail call void @llvm.assume(i1 %9), !dbg !60
  %10 = ptrtoint double* %5 to i64, !dbg !61
  %11 = and i64 %10, 31, !dbg !61
  %12 = icmp eq i64 %11, 0, !dbg !61
  tail call void @llvm.assume(i1 %12), !dbg !61
  %13 = icmp sgt i64 %1, 0, !dbg !62
  tail call void @llvm.assume(i1 %13) #1, !dbg !62, !noalias !66
  %14 = icmp sgt i64 %0, 0, !dbg !69
  tail call void @llvm.assume(i1 %14) #1, !dbg !69, !noalias !66
  br i1 false, label %39, label %15, !dbg !70

; <label>:15:                                     ; preds = %3
  %16 = icmp ult i64 %0, 16
  %17 = icmp ult i64 %0, 16
  br label %18, !dbg !70

; <label>:18:                                     ; preds = %86, %15
  %19 = phi i64 [ 0, %15 ], [ %87, %86 ]
  %20 = phi i64 [ %1, %15 ], [ %88, %86 ]
  br i1 %16, label %23, label %21, !dbg !71

; <label>:21:                                     ; preds = %18
  %22 = mul nsw i64 %19, %0
  br label %25, !dbg !71

; <label>:23:                                     ; preds = %18
  %24 = mul nsw i64 %19, %0
  br label %51, !dbg !71

; <label>:25:                                     ; preds = %21, %25
  %26 = phi i64 [ %36, %25 ], [ 0, %21 ], !dbg !72
  %27 = add nsw i64 %22, %26, !dbg !76
  %28 = getelementptr inbounds double, double* %5, i64 %27, !dbg !77
  %29 = bitcast double* %28 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %29, align 32, !dbg !78, !tbaa !40
  %30 = getelementptr double, double* %28, i64 4, !dbg !78
  %31 = bitcast double* %30 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %31, align 32, !dbg !78, !tbaa !40
  %32 = getelementptr double, double* %28, i64 8, !dbg !78
  %33 = bitcast double* %32 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %33, align 32, !dbg !78, !tbaa !40
  %34 = getelementptr double, double* %28, i64 12, !dbg !78
  %35 = bitcast double* %34 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %35, align 32, !dbg !78, !tbaa !40
  %36 = add i64 %26, 16, !dbg !72
  %37 = icmp eq i64 %36, %0, !dbg !72
  br i1 %37, label %58, label %25, !dbg !72, !llvm.loop !79

; <label>:38:                                     ; preds = %86
  br label %39, !dbg !80

; <label>:39:                                     ; preds = %38, %3
  br i1 false, label %40, label %50, !dbg !80

; <label>:40:                                     ; preds = %39
  br label %41, !dbg !80

; <label>:41:                                     ; preds = %40
  br i1 undef, label %45, label %42, !dbg !71

; <label>:42:                                     ; preds = %41
  br label %43, !dbg !71

; <label>:43:                                     ; preds = %43, %42
  br i1 true, label %44, label %43, !dbg !72, !llvm.loop !79

; <label>:44:                                     ; preds = %43
  br label %48, !dbg !81

; <label>:45:                                     ; preds = %41
  br label %46, !dbg !71

; <label>:46:                                     ; preds = %46, %45
  br i1 true, label %47, label %46, !dbg !82, !llvm.loop !83

; <label>:47:                                     ; preds = %46
  br label %48, !dbg !81

; <label>:48:                                     ; preds = %47, %44
  br label %49, !dbg !84

; <label>:49:                                     ; preds = %48
  br label %50, !dbg !80

; <label>:50:                                     ; preds = %39, %49
  ret void, !dbg !80

; <label>:51:                                     ; preds = %23, %51
  %52 = phi i64 [ %55, %51 ], [ 0, %23 ]
  %53 = add nsw i64 %24, %52, !dbg !76
  %54 = getelementptr inbounds double, double* %5, i64 %53, !dbg !77
  store double 0x40091EB860000000, double* %54, align 8, !dbg !78, !tbaa !40
  %55 = add nuw nsw i64 %52, 1, !dbg !72
  %56 = icmp eq i64 %55, %0, !dbg !85
  br i1 %56, label %57, label %51, !dbg !82, !llvm.loop !83

; <label>:57:                                     ; preds = %51
  br label %59, !dbg !81

; <label>:58:                                     ; preds = %25
  br label %59, !dbg !81

; <label>:59:                                     ; preds = %58, %57
  %60 = or i64 %19, 1, !dbg !81
  br i1 %17, label %77, label %61, !dbg !71

; <label>:61:                                     ; preds = %59
  %62 = mul nsw i64 %60, %0
  br label %63, !dbg !71

; <label>:63:                                     ; preds = %63, %61
  %64 = phi i64 [ %74, %63 ], [ 0, %61 ], !dbg !72
  %65 = add nsw i64 %62, %64, !dbg !76
  %66 = getelementptr inbounds double, double* %5, i64 %65, !dbg !77
  %67 = bitcast double* %66 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %67, align 32, !dbg !78, !tbaa !40
  %68 = getelementptr double, double* %66, i64 4, !dbg !78
  %69 = bitcast double* %68 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %69, align 32, !dbg !78, !tbaa !40
  %70 = getelementptr double, double* %66, i64 8, !dbg !78
  %71 = bitcast double* %70 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %71, align 32, !dbg !78, !tbaa !40
  %72 = getelementptr double, double* %66, i64 12, !dbg !78
  %73 = bitcast double* %72 to <4 x double>*, !dbg !78
  store <4 x double> <double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000, double 0x40091EB860000000>, <4 x double>* %73, align 32, !dbg !78, !tbaa !40
  %74 = add i64 %64, 16, !dbg !72
  %75 = icmp eq i64 %74, %0, !dbg !72
  br i1 %75, label %76, label %63, !dbg !72, !llvm.loop !79

; <label>:76:                                     ; preds = %63
  br label %86, !dbg !81

; <label>:77:                                     ; preds = %59
  %78 = mul nsw i64 %60, %0
  br label %79, !dbg !71

; <label>:79:                                     ; preds = %79, %77
  %80 = phi i64 [ %83, %79 ], [ 0, %77 ]
  %81 = add nsw i64 %78, %80, !dbg !76
  %82 = getelementptr inbounds double, double* %5, i64 %81, !dbg !77
  store double 0x40091EB860000000, double* %82, align 8, !dbg !78, !tbaa !40
  %83 = add nuw nsw i64 %80, 1, !dbg !72
  %84 = icmp eq i64 %83, %0, !dbg !85
  br i1 %84, label %85, label %79, !dbg !82, !llvm.loop !83

; <label>:85:                                     ; preds = %79
  br label %86, !dbg !81

; <label>:86:                                     ; preds = %85, %76
  %87 = add nsw i64 %19, 2, !dbg !81
  %88 = add i64 %20, -2, !dbg !84
  %89 = icmp eq i64 %88, 0, !dbg !84
  br i1 %89, label %38, label %18, !dbg !84, !llvm.loop !54
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="haswell" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cmov,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,-adx,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-clflushopt,-clwb,-clzero,-fma4,-mwaitx,-pku,-prefetchwt1,-prfchw,-rdseed,-rtm,-sgx,-sha,-sse4a,-tbm,-xop,-xsavec,-xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)", isOptimized: true, runtimeVersion: 0, emissionKind: NoDebug, enums: !2)
!1 = !DIFile(filename: "md_iterator_3.cpp", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 5.0.0 (git@github.com:GorNishanov/clang.git 7fe33d27853beaa85b039482586ef86039a74b56) (git@github.com:GorNishanov/llvm.git bb958011044a060bda6af65d0e50dfbb52a8a604)"}
!5 = distinct !DISubprogram(name: "fill_pi_generator_NN", scope: !1, file: !1, line: 626, type: !6, isLocal: false, isDefinition: true, scopeLine: 630, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!6 = !DISubroutineType(types: !2)
!7 = !DILocation(line: 671, column: 47, scope: !8, inlinedAt: !10)
!8 = distinct !DISubprogram(name: "data", scope: !9, file: !9, line: 670, type: !6, isLocal: false, isDefinition: true, scopeLine: 671, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!9 = !DIFile(filename: "/global/u1/w/wash/development/gor-llvm/INSTALL_RELEASE/bin/../include/c++/v1/vector", directory: "/global/homes/w/wash/sandbox/cxx/mditerator")
!10 = distinct !DILocation(line: 631, column: 33, scope: !5)
!11 = !{!12, !13, i64 0}
!12 = !{!"_ZTSNSt3__113__vector_baseIdNS_9allocatorIdEEEE", !13, i64 0, !13, i64 8, !16, i64 16}
!13 = !{!"any pointer", !14, i64 0}
!14 = !{!"omnipotent char", !15, i64 0}
!15 = !{!"Simple C++ TBAA"}
!16 = !{!"_ZTSNSt3__117__compressed_pairIPdNS_9allocatorIdEEEE"}
!17 = !DILocation(line: 633, column: 5, scope: !5)
!18 = !DILocation(line: 634, column: 5, scope: !5)
!19 = !DILocation(line: 462, column: 9, scope: !20, inlinedAt: !21)
!20 = distinct !DISubprogram(name: "generate", scope: !1, file: !1, line: 460, type: !6, isLocal: false, isDefinition: true, scopeLine: 461, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!21 = distinct !DILocation(line: 242, column: 9, scope: !22, inlinedAt: !23)
!22 = distinct !DISubprogram(name: "resume", scope: !1, file: !1, line: 240, type: !6, isLocal: false, isDefinition: true, scopeLine: 241, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!23 = distinct !DILocation(line: 451, column: 11, scope: !24, inlinedAt: !25)
!24 = distinct !DISubprogram(name: "begin", scope: !1, file: !1, line: 449, type: !6, isLocal: false, isDefinition: true, scopeLine: 450, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!25 = distinct !DILocation(line: 637, column: 19, scope: !5)
!26 = !DILocation(line: 463, column: 9, scope: !20, inlinedAt: !21)
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN18index_2d_generator8generateEll.resume: argument 0"}
!29 = distinct !{!29, !"_ZN18index_2d_generator8generateEll.resume"}
!30 = !DILocation(line: 637, column: 19, scope: !5)
!31 = !DILocation(line: 638, column: 25, scope: !5)
!32 = !DILocation(line: 465, column: 45, scope: !20, inlinedAt: !33)
!33 = distinct !DILocation(line: 242, column: 9, scope: !22, inlinedAt: !34)
!34 = distinct !DILocation(line: 429, column: 18, scope: !35, inlinedAt: !36)
!35 = distinct !DISubprogram(name: "operator++", scope: !1, file: !1, line: 427, type: !6, isLocal: false, isDefinition: true, scopeLine: 428, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!36 = distinct !DILocation(line: 637, column: 19, scope: !5)
!37 = !DILocation(line: 638, column: 17, scope: !5)
!38 = !DILocation(line: 638, column: 9, scope: !5)
!39 = !DILocation(line: 638, column: 30, scope: !5)
!40 = !{!41, !41, i64 0}
!41 = !{!"double", !14, i64 0}
!42 = distinct !{!42, !43, !44, !45, !46}
!43 = !DILocation(line: 465, column: 13, scope: !20)
!44 = !DILocation(line: 466, column: 17, scope: !20)
!45 = !{!"llvm.loop.vectorize.width", i32 1}
!46 = !{!"llvm.loop.interleave.count", i32 1}
!47 = !DILocation(line: 639, column: 1, scope: !5)
!48 = !DILocation(line: 464, column: 41, scope: !20, inlinedAt: !33)
!49 = !DILocation(line: 465, column: 13, scope: !20, inlinedAt: !33)
!50 = distinct !{!50, !43, !44, !51, !45, !46}
!51 = !{!"llvm.loop.unroll.runtime.disable"}
!52 = !DILocation(line: 464, column: 9, scope: !20, inlinedAt: !33)
!53 = !DILocation(line: 465, column: 38, scope: !20, inlinedAt: !33)
!54 = distinct !{!54, !55, !44}
!55 = !DILocation(line: 464, column: 9, scope: !20)
!56 = distinct !DISubprogram(name: "fill_pi_generator_NM", scope: !1, file: !1, line: 641, type: !6, isLocal: false, isDefinition: true, scopeLine: 646, flags: DIFlagPrototyped, isOptimized: true, unit: !0, variables: !2)
!57 = !DILocation(line: 671, column: 47, scope: !8, inlinedAt: !58)
!58 = distinct !DILocation(line: 647, column: 33, scope: !56)
!59 = !DILocation(line: 649, column: 5, scope: !56)
!60 = !DILocation(line: 650, column: 5, scope: !56)
!61 = !DILocation(line: 651, column: 5, scope: !56)
!62 = !DILocation(line: 462, column: 9, scope: !20, inlinedAt: !63)
!63 = distinct !DILocation(line: 242, column: 9, scope: !22, inlinedAt: !64)
!64 = distinct !DILocation(line: 451, column: 11, scope: !24, inlinedAt: !65)
!65 = distinct !DILocation(line: 654, column: 19, scope: !56)
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN18index_2d_generator8generateEll.resume: argument 0"}
!68 = distinct !{!68, !"_ZN18index_2d_generator8generateEll.resume"}
!69 = !DILocation(line: 463, column: 9, scope: !20, inlinedAt: !63)
!70 = !DILocation(line: 654, column: 19, scope: !56)
!71 = !DILocation(line: 655, column: 25, scope: !56)
!72 = !DILocation(line: 465, column: 45, scope: !20, inlinedAt: !73)
!73 = distinct !DILocation(line: 242, column: 9, scope: !22, inlinedAt: !74)
!74 = distinct !DILocation(line: 429, column: 18, scope: !35, inlinedAt: !75)
!75 = distinct !DILocation(line: 654, column: 19, scope: !56)
!76 = !DILocation(line: 655, column: 17, scope: !56)
!77 = !DILocation(line: 655, column: 9, scope: !56)
!78 = !DILocation(line: 655, column: 30, scope: !56)
!79 = distinct !{!79, !43, !44, !45, !46}
!80 = !DILocation(line: 656, column: 1, scope: !56)
!81 = !DILocation(line: 464, column: 41, scope: !20, inlinedAt: !73)
!82 = !DILocation(line: 465, column: 13, scope: !20, inlinedAt: !73)
!83 = distinct !{!83, !43, !44, !51, !45, !46}
!84 = !DILocation(line: 464, column: 9, scope: !20, inlinedAt: !73)
!85 = !DILocation(line: 465, column: 38, scope: !20, inlinedAt: !73)
